<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="NALX_FRONTEND_LATEST" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.2.3.17. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Origin" elementType="Header">
            <stringProp name="Header.name">Origin</stringProp>
            <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
          </elementProp>
          <elementProp name="X-USER-LANG" elementType="Header">
            <stringProp name="Header.name">X-USER-LANG</stringProp>
            <stringProp name="Header.value">en</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="content-type" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="X-AUTH-TOKEN" elementType="Header">
            <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
            <stringProp name="Header.value">${access_key}</stringProp>
          </elementProp>
          <elementProp name="accept" elementType="Header">
            <stringProp name="Header.name">accept</stringProp>
            <stringProp name="Header.value">*/*</stringProp>
          </elementProp>
          <elementProp name="X-TRACE-USER" elementType="Header">
            <stringProp name="Header.name">X-TRACE-USER</stringProp>
            <stringProp name="Header.value">b3e88f885eadd92592ae30328afbede5301f5721925a0d8d9b6278b60cc27074</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">uat-nalx.elcompanies.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">dev-857770.okta.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="token type" elementType="Argument">
            <stringProp name="Argument.name">token type</stringProp>
            <stringProp name="Argument.value">Bearer</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lmprotocol" elementType="Argument">
            <stringProp name="Argument.name">lmprotocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lmserver" elementType="Argument">
            <stringProp name="Argument.name">lmserver</stringProp>
            <stringProp name="Argument.value">10.252.6.38</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">uat-nalx.elcompanies.com</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.embedded_url_re">*</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies">
          <elementProp name="iPlanetDirectoryPro" elementType="Cookie" testname="iPlanetDirectoryPro">
            <stringProp name="Cookie.value">${session_key}</stringProp>
            <stringProp name="Cookie.domain">.elcompanies.com</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="iPlanetDirectoryPro" elementType="Cookie" testname="iPlanetDirectoryPro">
            <stringProp name="Cookie.value">${session_key}</stringProp>
            <stringProp name="Cookie.domain">.am-qa.elcompanies.com</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
        </collectionProp>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">UsersFrontEnd_New.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.group</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">Username,Password,UserId,BrandId,InfocusId,Consumer_LevelId,ToolsId,BusinessId,AccountsId,PoliciesId,LeadershipId,SelfDevelopmentId,CultureId,BeautyAdvisorId,BadgeId,BlogId</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">20</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">400</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Login Page" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Okta login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;${Username}&quot;,&quot;password&quot;:&quot;${Password}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/okta/auth/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_key</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">session_key</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.session_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://dev-857770.okta.com/oauth2/v1/authorize?client_id=0oaidu450QY2Ke0nh356&amp;redirect_uri=https%3A%2F%2Fuat-nalx.elcompanies.com%2F&amp;response_type=id_token+token&amp;response_mode=form_post&amp;state=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI3NGI1ZDE4YS02MGRmLTQ4ZWItYTQ2Ny1jNDJkMjJkY2E1N2EiLCJqdGkiOiJmNDk1MDkyNjBmOTZjYWNhMjkzNjQ4NmE3Mjg2NjE3ZDc0Zjc0ZTIxZWY3MzE2N2Y0MGQ4OWM3OTYzZmE2M2I4YjMyNTVlNTliZTY1Mzg2NCIsImlhdCI6MTU5MTA3ODI0OSwibmJmIjoxNTkxMDc4MjQ5LCJleHAiOjE1OTE5NDIyNDksInN1YiI6IjIxMDQ5NSIsInNjb3BlcyI6WyJhdXRoZW50aWNhdGVkIl19.VOI1O1tgXYhHMuwPab0YT4m1F2Qmp5c1f4hklJc-EZMxtb-A74caTY-mTM7yZkUsn3sZITTMcxCYIEZUdMiZIczoCbf_iuMcRaBFsR4zHlMElo6_fqeYp4ZsATzJdZ0B6XGrXsIylLOcs43e1cLZ6Euk9IcXsC8oRd_uot4VEnrxqrzwCtpV_rYEfw8n2jZXt8bSX6GtnVreeupUr7vBd39Q1N-UiFdgJmGhlOvO8uJADmpfyRpPrwJC9zSCQvp3TGC3n0xMpRBTvqsw5WpDYqNamhXO719HNjOzrruOHKeYmIcJzdlhaIb6ZRiQJaAxf5qLvH-vBy9CZwieE8yHyA&amp;nonce=67535679&amp;sessionToken=20111_NGgIfT-GfDicJcxlNXdCDQxHI-1HoYjQUyJi0w5aKsHHnJ6lG&amp;scope=openid+offline_access" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">openid offline_access</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sessionToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sessionToken</stringProp>
                  <stringProp name="Argument.value">20111_NGgIfT-GfDicJcxlNXdCDQxHI-1HoYjQUyJi0w5aKsHHnJ6lG</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="response_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">response_type</stringProp>
                  <stringProp name="Argument.value">id_token token</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">redirect_uri</stringProp>
                  <stringProp name="Argument.value">https://uat-nalx.elcompanies.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                  <stringProp name="Argument.value">eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI3NGI1ZDE4YS02MGRmLTQ4ZWItYTQ2Ny1jNDJkMjJkY2E1N2EiLCJqdGkiOiJmNDk1MDkyNjBmOTZjYWNhMjkzNjQ4NmE3Mjg2NjE3ZDc0Zjc0ZTIxZWY3MzE2N2Y0MGQ4OWM3OTYzZmE2M2I4YjMyNTVlNTliZTY1Mzg2NCIsImlhdCI6MTU5MTA3ODI0OSwibmJmIjoxNTkxMDc4MjQ5LCJleHAiOjE1OTE5NDIyNDksInN1YiI6IjIxMDQ5NSIsInNjb3BlcyI6WyJhdXRoZW50aWNhdGVkIl19.VOI1O1tgXYhHMuwPab0YT4m1F2Qmp5c1f4hklJc-EZMxtb-A74caTY-mTM7yZkUsn3sZITTMcxCYIEZUdMiZIczoCbf_iuMcRaBFsR4zHlMElo6_fqeYp4ZsATzJdZ0B6XGrXsIylLOcs43e1cLZ6Euk9IcXsC8oRd_uot4VEnrxqrzwCtpV_rYEfw8n2jZXt8bSX6GtnVreeupUr7vBd39Q1N-UiFdgJmGhlOvO8uJADmpfyRpPrwJC9zSCQvp3TGC3n0xMpRBTvqsw5WpDYqNamhXO719HNjOzrruOHKeYmIcJzdlhaIb6ZRiQJaAxf5qLvH-vBy9CZwieE8yHyA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nonce" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">nonce</stringProp>
                  <stringProp name="Argument.value">67535679</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                  <stringProp name="Argument.value">0oaidu450QY2Ke0nh356</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="response_mode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">response_mode</stringProp>
                  <stringProp name="Argument.value">form_post</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">oauth2/v1/authorize</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="decision" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">decision</stringProp>
                  <stringProp name="Argument.value">allow</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">openid profile email</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="response_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">response_type</stringProp>
                  <stringProp name="Argument.value">token id_token</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">redirect_uri</stringProp>
                  <stringProp name="Argument.value">https://uat-nalx.elcompanies.com/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nonce" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">nonce</stringProp>
                  <stringProp name="Argument.value">210495</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                  <stringProp name="Argument.value">NALX_dev</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">am-qa.elcompanies.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">openam/oauth2/realms/root/realms/qa/authorize</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Home Page" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Static Labels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStaticLabel&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getStaticLabel {\n  StaticLabels: getStaticLabels {\n    otherLabel\n    businessTab\n    policiesTab\n    cultureTab\n    noDocumentsBusinessText\n    noDocumentsPoliciesText\n    noDocumentsCultureText\n    newThisYearLabel\n    allLearnersLabel\n    allSnapshotLabel\n    allSeminarsLabel\n    upcomingLabel\n    completedLabel\n    noRecentActivityText\n    peopleInvitedLabel\n    aboutTab\n    accountsTab\n    additionalCommentsText\n    advancedLearningTab\n    advanceText\n    allBadgesTab\n    allBadgesText\n    allBrandsText\n    allDoorsText\n    allFbGroupLabel\n    allFeatureLabel\n    allLabel\n    allLeadershipText\n    allRegionsText\n    allSpGroupLabel\n    allTopLearnersText\n    anniversaryText\n    anotherErrText\n    archiveTab\n    attachDocumentText\n    attachNewDocMsg\n    avgMonthlyText\n    awardBadgesText\n    awardBadgeText\n    awardedByText\n    badgeAllocatedText\n    badgeAllocationText\n    badgeCategoryText\n    badgeName\n    badgePointsAwardedText\n    badgePtsText\n    badgesAllocationMsg\n    badgesAwardedText\n    badgesAwardedToLearnerText\n    badgesFoundText\n    badgesText\n    badgeText\n    basicLearningTab\n    basicTab\n    birthdayText\n    blogDetailText\n    blogsTab\n    brandErrMsg\n    brandFoundText\n    brandLinkName\n    brandListLabel\n    brandsLabel\n    brandTab\n    brandValuesTab\n    browserNotSupportVideo\n    buttonName\n    calendarName\n    cancelName\n    categoryForEvaluationText\n    categoryName\n    changeLangText\n    classroomTab\n    clearAllText\n    coachingRecommendText\n    coachText\n    comingSoonText\n    commentsText\n    confirmText\n    congratulationsText\n    consumersTab\n    continueText\n    courseLockedText\n    dashboardFeaturedLabel\n    daysLeftText\n    deleteCommentMsg\n    deleteText\n    detailedViewText\n    doneText\n    editText\n    educationInfoText\n    educationName\n    educationTab\n    elcBrandName\n    emailBodyEmptyText\n    emailLabel\n    emailName\n    emailText\n    emptyTemplateMsg\n    englishLabel\n    enterValidEmailText\n    errMsgLanguage\n    errorTemplateMsg\n    errorText\n    errPostedCommentMsg\n    establishedPerformerText\n    evaluateError\n    evaluateName\n    evaluationText\n    evaluatorText\n    exitEvaluationText\n    experiencesAvailText\n    experiencesTab\n    facebookGroupsText\n    featuredProductsAvalText\n    featuredProductsTab\n    featuredProductText\n    featuredText\n    fieldExecutiveText\n    filterText\n    frenchLabel\n    goalManagementText\n    goBackText\n    gotoHomeText\n    historyFoundText\n    historyText\n    hiText\n    influenceText\n    infoBrandValuesText\n    infocusAvailableText\n    infocusName\n    inFocusTab\n    intermediateText\n    interPerformerText\n    itemName\n    joinedOnText\n    knowledgeText\n    leaderboardText\n    leadershipTab\n    learnerBrandDistribText\n    learnerPhotoName\n    learnerProficiencyDistribText\n    learnersBATab\n    learnersFETab\n    learnersFoundText\n    learnersNameText\n    learnersSelectedText\n    learnersText\n    learnerText\n    learningExperienceLabel\n    learningSnapshotText\n    leaveCommentText\n    levelLabel\n    loadingName\n    loginError\n    logoutText\n    mapAvailableText\n    masterText\n    moduleCompletedText\n    moduleCurrLockText\n    moduleRecommendedText\n    modulesCompletedText\n    modulesRecommendToText\n    modulesSelectedText\n    mostAwardedCatText\n    mostRecentEvaluationText\n    myAccountsTab\n    myBadgesLabel\n    myCOEsTab\n    myCompletedModulesText\n    myDevelopmentTab\n    myEarnedBadgesTab\n    myGroupLink\n    myLearnersLabel\n    myPerformanceText\n    myProfileText\n    myRecommendationsText\n    myRoleTab\n    myTeamDetailsText\n    myTeamStatistics\n    myTeamText\n    myTopLearnersText\n    nalxName\n    newLearnersText\n    nextText\n    noBadgesAwardedText\n    noBadgesAwardedYetText\n    noBadgesFoundText\n    noBlogsAvailText\n    noBrandFoundText\n    noBrandValuesText\n    nocategoriesText\n    noCommentText\n    noCompletedModulesText\n    noDataSelectedFilter\n    noDataSelectionText\n    noDocumentsAccText\n    noDocumentsCOEsText\n    noDocumentsConsumersText\n    noDocumentsLeadershipText\n    noDocumentsMyAccText\n    noDocumentsMyDevText\n    noDocumentsRoleText\n    noDocumentsSelfDevText\n    noDocumentsToolsText\n    noDocumentText\n    noDoorsFoundText\n    noEducationText\n    noEngageStoriesText\n    noExperiencesText\n    noFbGroupText\n    noFeaturedProductsText\n    noFeatureLabel\n    noFeedbackSuggestText\n    noHistoryFoundText\n    noImageAttachedText\n    noInfocusText\n    noLeadershipText\n    noLearnersFoundText\n    noLearnersText\n    noMapAvailableText\n    noModulesAvailableText\n    noModulesRecommendText\n    noModulesToRecommendText\n    noNewnessNotifiText\n    noofBadgesText\n    noRecentEvaluationText\n    noRegionsFoundText\n    noRelevantInfoText\n    noResourcesText\n    northAmericaLabel\n    noSeminarsRegionText\n    noSeminarsText\n    noSocialAccText\n    noSpGroupText\n    notAssessedText\n    noTeamMemberText\n    noText\n    notFormattedImage\n    notFoundPageText\n    notificationName\n    notificationsText\n    notifyEvaluationText\n    noTopLearnersText\n    noUpcomingSeminarsLabel\n    noUpcomingSeminarsText\n    noviceText\n    openModalText\n    outofText\n    overText\n    passwordLabel\n    performanceDashboardText\n    personInvitedLabel\n    placeText\n    pointsText\n    policyUnavailableText\n    privacyPolicyText\n    productName\n    proficiencyLevelLabel\n    profileBackgroundImageName\n    profileImageName\n    profileText\n    promotedText\n    promotionLevelMsg\n    promotionMsg\n    promotionText\n    promotionToLevelMsg\n    readMoreText\n    recentActivitiesLabel\n    recentEvaluationText\n    recommendedbyText\n    recommendModulesText\n    recommendText\n    regionsText\n    rememberMeLabel\n    resourcesInfoText\n    resourcesTab\n    resourceTab\n    reviewAvgScoreText\n    reviewName\n    salesResultText\n    searchName\n    searchResultsText\n    searchTermText\n    searchText\n    sectionText\n    selectBadgesMsg\n    selectBrandText\n    selectDoorText\n    selectOptionText\n    selectRegionText\n    selectSeminarText\n    selectText\n    selfDevelopmentTab\n    seminarsText\n    sendingRecommendText\n    sendText\n    sessionExpiredLabel\n    signInLabel\n    snapshotsPerformedText\n    snapshotsText\n    snapshotText\n    socialIconName\n    somethingWentWrongMsg\n    spanishLabel\n    statusErr\n    statusText\n    submitText\n    subText\n    subtitleText\n    successName\n    supportEmailLabel\n    techniqueServiceText\n    titleText\n    toolsTab\n    topBeautyAdvisorsText\n    topFieldExecutivesText\n    topLearnersName\n    topLearnersText\n    totalAvailableText\n    totalBadgesText\n    totalLearnersText\n    totalModulesCompletedText\n    totalSnapshotsText\n    troubleLabel\n    tryAgainText\n    unlockAdvLearningText\n    unlockAdvModuleMsg\n    upcomingSeminarsLabel\n    updateBirthdate\n    updateText\n    uploadPictureText\n    uploadProfilePicMsg\n    userName\n    verifyRecipientText\n    viewAllLabel\n    viewDetailsText\n    viewDocumentText\n    viewExistingDocumentText\n    viewSplashLabel\n    viewText\n    visitTalentBankText\n    visitText\n    whatNewText\n    writeCommentText\n    writeMsgText\n    yesText\n    notApplicableText\n    readyToLearnText\n    startToSoarText\n    pushingForExcellenceText\n    readyToTeachOthersText\n    ratingBeginingText\n    ratingEarlyText\n    ratingComfortableText\n    ratingReadyText\n    ratingGreatStartText\n    ratingExpertiseText\n    ratingConsistentText\n    ratingSavvyText\n    badgeAwardText\n    fiscalYearText\n    avgPerMonthText\n    mostAwardedText\n    leastAwardedText\n    questionText\n    sinceText\n    emailSentText\n    moreResultsText\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETSTATICLABEL</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">b3e88f885eadd92592ae30328afbede5301f5721925a0d8d9b6278b60cc27074</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">e9ffbf8c-6393-498c-8ccb-3720d0fcec20</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591078253650</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;userDetails&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query userDetails($userId: String!) {\n  getUserDetail(userId: $userId) {\n    firstName\n    lastName\n    city\n    region\n    roles\n    userPicture\n    groups\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">USERDETAILS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">b3e88f885eadd92592ae30328afbede5301f5721925a0d8d9b6278b60cc27074</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">e96548c6-fbb6-440d-9745-366f625c0003</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591078253675</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Notifications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNotifications&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query getNotifications($userId: String!) {\n  getNotifications(userId: $userId, page: 0, limit: 0) {\n    notificationsCount\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETNOTIFICATIONS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">b3e88f885eadd92592ae30328afbede5301f5721925a0d8d9b6278b60cc27074</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">36bf9a07-554d-49b2-98cd-970c254dbede</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591078253684</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Brand List" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;brandList&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query brandList {\n  brandList: getBrandListing {\n    uuid\n    nid\n    title\n    fieldBrandUrl\n    fieldBrandImage\n    isElc\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">BRANDLIST</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">b3e88f885eadd92592ae30328afbede5301f5721925a0d8d9b6278b60cc27074</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">37316e2c-1827-4679-a0ab-51c48daadef0</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591078253723</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Culture Levels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getCulture&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getCulture {\n  getCulture: getEducationMyCulture {\n    nid\n    title\n    description\n    image\n    tags: tags {\n      nid\n      title\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETCULTURE</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">b3e88f885eadd92592ae30328afbede5301f5721925a0d8d9b6278b60cc27074</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">dad7676a-1754-4254-9412-5238e552f95d</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591078253731</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Policies Levels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getPolicies&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getPolicies {\n  getPolicies: getEducationMyPolicies {\n    nid\n    title\n    description\n    image\n    tags: tags {\n      nid\n      title\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETPOLICIES</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">b3e88f885eadd92592ae30328afbede5301f5721925a0d8d9b6278b60cc27074</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">81894358-be52-4b31-8422-b897c9728d50</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591078253736</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Business Levels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getBusiness&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getBusiness {\n  getBusiness: getEducationMyBusiness {\n    nid\n    title\n    description\n    image\n    tags: tags {\n      nid\n      title\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETBUSINESS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">b3e88f885eadd92592ae30328afbede5301f5721925a0d8d9b6278b60cc27074</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">afe64be1-67f2-44ba-baff-9858e23f5aca</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591078253744</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tools Levels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getTools&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getTools {\n  getTools: getEducationMyCoes {\n    nid\n    title\n    description\n    image\n    tags: tags {\n      nid\n      title\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETTOOLS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">b3e88f885eadd92592ae30328afbede5301f5721925a0d8d9b6278b60cc27074</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">698cb082-6933-43ac-9107-a02fa715f522</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591078253748</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Consumer Levels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getConsumers&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getConsumers {\n  getConsumers: getEducationMyRole {\n    nid\n    title\n    description\n    image\n    tags: tags {\n      nid\n      title\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETCONSUMERS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">b3e88f885eadd92592ae30328afbede5301f5721925a0d8d9b6278b60cc27074</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">f675864b-196f-4b53-a2fd-d5dfd4c2c43a</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591078253754</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Leadership Levels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getLeadership&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getLeadership {\n  getLeadership: getEducationLeadership {\n    nid\n    title\n    description\n    image\n    tags: tags {\n      nid\n      title\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETLEADERSHIP</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">b3e88f885eadd92592ae30328afbede5301f5721925a0d8d9b6278b60cc27074</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">2119caac-c6bd-49dc-a1b3-c29251169854</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591078253757</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Self Development Levels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSelfDevelopment&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getSelfDevelopment {\n  getSelfDevelopment: getEducationMyDevelopment {\n    nid\n    title\n    description\n    image\n    tags: tags {\n      nid\n      title\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETSELFDEVELOPMENT</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">b3e88f885eadd92592ae30328afbede5301f5721925a0d8d9b6278b60cc27074</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">9ebd1458-9831-417f-a8c0-8a55bf823cc1</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591078253761</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Account Levels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getAccount&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getAccount {\n  getAccount: getEducationMyAccount {\n    nid\n    title\n    description\n    image\n    tags: tags {\n      nid\n      title\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETACCOUNT</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">b3e88f885eadd92592ae30328afbede5301f5721925a0d8d9b6278b60cc27074</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">3811a021-e7bc-405b-8178-d9a2fee1db65</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591078253766</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dashboard Seminar" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;dashboardSeminar&quot;,&quot;variables&quot;:{&quot;page&quot;:1,&quot;limit&quot;:5,&quot;status&quot;:&quot;&quot;,&quot;search&quot;:&quot;&quot;},&quot;query&quot;:&quot;query dashboardSeminar($page: Int, $limit: Int, $status: String, $search: String) {\n  dashboardSeminar: getSeminar(page: $page, limit: $limit, status: $status, search: $search) {\n    title\n    date\n    place\n    status\n    spashlink\n    attendance: attendance {\n      present\n      total\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">DASHBOARDSEMINAR</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">b3e88f885eadd92592ae30328afbede5301f5721925a0d8d9b6278b60cc27074</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">0f20ac43-a573-496d-a167-e2753f48a79e</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591078253771</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dashboard Featured" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;dashboardFeatured&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query dashboardFeatured {\n  dashboardFeatured: getDashboardFeatured {\n    title\n    description\n    document\n    image\n    fileUrl\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">DASHBOARDFEATURED</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">b3e88f885eadd92592ae30328afbede5301f5721925a0d8d9b6278b60cc27074</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">${access_key}</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">af53dea0-7879-4cde-b0f8-b60702cd9920</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591078253776</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Random Order Controller" enabled="true"/>
        <hashTree/>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Education Page" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>10.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Static Labels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStaticLabel&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getStaticLabel {\n  StaticLabels: getStaticLabels {\n    otherLabel\n    businessTab\n    policiesTab\n    cultureTab\n    noDocumentsBusinessText\n    noDocumentsPoliciesText\n    noDocumentsCultureText\n    newThisYearLabel\n    allLearnersLabel\n    allSnapshotLabel\n    allSeminarsLabel\n    upcomingLabel\n    completedLabel\n    noRecentActivityText\n    peopleInvitedLabel\n    aboutTab\n    accountsTab\n    additionalCommentsText\n    advancedLearningTab\n    advanceText\n    allBadgesTab\n    allBadgesText\n    allBrandsText\n    allDoorsText\n    allFbGroupLabel\n    allFeatureLabel\n    allLabel\n    allLeadershipText\n    allRegionsText\n    allSpGroupLabel\n    allTopLearnersText\n    anniversaryText\n    anotherErrText\n    archiveTab\n    attachDocumentText\n    attachNewDocMsg\n    avgMonthlyText\n    awardBadgesText\n    awardBadgeText\n    awardedByText\n    badgeAllocatedText\n    badgeAllocationText\n    badgeCategoryText\n    badgeName\n    badgePointsAwardedText\n    badgePtsText\n    badgesAllocationMsg\n    badgesAwardedText\n    badgesAwardedToLearnerText\n    badgesFoundText\n    badgesText\n    badgeText\n    basicLearningTab\n    basicTab\n    birthdayText\n    blogDetailText\n    blogsTab\n    brandErrMsg\n    brandFoundText\n    brandLinkName\n    brandListLabel\n    brandsLabel\n    brandTab\n    brandValuesTab\n    browserNotSupportVideo\n    buttonName\n    calendarName\n    cancelName\n    categoryForEvaluationText\n    categoryName\n    changeLangText\n    classroomTab\n    clearAllText\n    coachingRecommendText\n    coachText\n    comingSoonText\n    commentsText\n    confirmText\n    congratulationsText\n    consumersTab\n    continueText\n    courseLockedText\n    dashboardFeaturedLabel\n    daysLeftText\n    deleteCommentMsg\n    deleteText\n    detailedViewText\n    doneText\n    editText\n    educationInfoText\n    educationName\n    educationTab\n    elcBrandName\n    emailBodyEmptyText\n    emailLabel\n    emailName\n    emailText\n    emptyTemplateMsg\n    englishLabel\n    enterValidEmailText\n    errMsgLanguage\n    errorTemplateMsg\n    errorText\n    errPostedCommentMsg\n    establishedPerformerText\n    evaluateError\n    evaluateName\n    evaluationText\n    evaluatorText\n    exitEvaluationText\n    experiencesAvailText\n    experiencesTab\n    facebookGroupsText\n    featuredProductsAvalText\n    featuredProductsTab\n    featuredProductText\n    featuredText\n    fieldExecutiveText\n    filterText\n    frenchLabel\n    goalManagementText\n    goBackText\n    gotoHomeText\n    historyFoundText\n    historyText\n    hiText\n    influenceText\n    infoBrandValuesText\n    infocusAvailableText\n    infocusName\n    inFocusTab\n    intermediateText\n    interPerformerText\n    itemName\n    joinedOnText\n    knowledgeText\n    leaderboardText\n    leadershipTab\n    learnerBrandDistribText\n    learnerPhotoName\n    learnerProficiencyDistribText\n    learnersBATab\n    learnersFETab\n    learnersFoundText\n    learnersNameText\n    learnersSelectedText\n    learnersText\n    learnerText\n    learningExperienceLabel\n    learningSnapshotText\n    leaveCommentText\n    levelLabel\n    loadingName\n    loginError\n    logoutText\n    mapAvailableText\n    masterText\n    moduleCompletedText\n    moduleCurrLockText\n    moduleRecommendedText\n    modulesCompletedText\n    modulesRecommendToText\n    modulesSelectedText\n    mostAwardedCatText\n    mostRecentEvaluationText\n    myAccountsTab\n    myBadgesLabel\n    myCOEsTab\n    myCompletedModulesText\n    myDevelopmentTab\n    myEarnedBadgesTab\n    myGroupLink\n    myLearnersLabel\n    myPerformanceText\n    myProfileText\n    myRecommendationsText\n    myRoleTab\n    myTeamDetailsText\n    myTeamStatistics\n    myTeamText\n    myTopLearnersText\n    nalxName\n    newLearnersText\n    nextText\n    noBadgesAwardedText\n    noBadgesAwardedYetText\n    noBadgesFoundText\n    noBlogsAvailText\n    noBrandFoundText\n    noBrandValuesText\n    nocategoriesText\n    noCommentText\n    noCompletedModulesText\n    noDataSelectedFilter\n    noDataSelectionText\n    noDocumentsAccText\n    noDocumentsCOEsText\n    noDocumentsConsumersText\n    noDocumentsLeadershipText\n    noDocumentsMyAccText\n    noDocumentsMyDevText\n    noDocumentsRoleText\n    noDocumentsSelfDevText\n    noDocumentsToolsText\n    noDocumentText\n    noDoorsFoundText\n    noEducationText\n    noEngageStoriesText\n    noExperiencesText\n    noFbGroupText\n    noFeaturedProductsText\n    noFeatureLabel\n    noFeedbackSuggestText\n    noHistoryFoundText\n    noImageAttachedText\n    noInfocusText\n    noLeadershipText\n    noLearnersFoundText\n    noLearnersText\n    noMapAvailableText\n    noModulesAvailableText\n    noModulesRecommendText\n    noModulesToRecommendText\n    noNewnessNotifiText\n    noofBadgesText\n    noRecentEvaluationText\n    noRegionsFoundText\n    noRelevantInfoText\n    noResourcesText\n    northAmericaLabel\n    noSeminarsRegionText\n    noSeminarsText\n    noSocialAccText\n    noSpGroupText\n    notAssessedText\n    noTeamMemberText\n    noText\n    notFormattedImage\n    notFoundPageText\n    notificationName\n    notificationsText\n    notifyEvaluationText\n    noTopLearnersText\n    noUpcomingSeminarsLabel\n    noUpcomingSeminarsText\n    noviceText\n    openModalText\n    outofText\n    overText\n    passwordLabel\n    performanceDashboardText\n    personInvitedLabel\n    placeText\n    pointsText\n    policyUnavailableText\n    privacyPolicyText\n    productName\n    proficiencyLevelLabel\n    profileBackgroundImageName\n    profileImageName\n    profileText\n    promotedText\n    promotionLevelMsg\n    promotionMsg\n    promotionText\n    promotionToLevelMsg\n    readMoreText\n    recentActivitiesLabel\n    recentEvaluationText\n    recommendedbyText\n    recommendModulesText\n    recommendText\n    regionsText\n    rememberMeLabel\n    resourcesInfoText\n    resourcesTab\n    resourceTab\n    reviewAvgScoreText\n    reviewName\n    salesResultText\n    searchName\n    searchResultsText\n    searchTermText\n    searchText\n    sectionText\n    selectBadgesMsg\n    selectBrandText\n    selectDoorText\n    selectOptionText\n    selectRegionText\n    selectSeminarText\n    selectText\n    selfDevelopmentTab\n    seminarsText\n    sendingRecommendText\n    sendText\n    sessionExpiredLabel\n    signInLabel\n    snapshotsPerformedText\n    snapshotsText\n    snapshotText\n    socialIconName\n    somethingWentWrongMsg\n    spanishLabel\n    statusErr\n    statusText\n    submitText\n    subText\n    subtitleText\n    successName\n    supportEmailLabel\n    techniqueServiceText\n    titleText\n    toolsTab\n    topBeautyAdvisorsText\n    topFieldExecutivesText\n    topLearnersName\n    topLearnersText\n    totalAvailableText\n    totalBadgesText\n    totalLearnersText\n    totalModulesCompletedText\n    totalSnapshotsText\n    troubleLabel\n    tryAgainText\n    unlockAdvLearningText\n    unlockAdvModuleMsg\n    upcomingSeminarsLabel\n    updateBirthdate\n    updateText\n    uploadPictureText\n    uploadProfilePicMsg\n    userName\n    verifyRecipientText\n    viewAllLabel\n    viewDetailsText\n    viewDocumentText\n    viewExistingDocumentText\n    viewSplashLabel\n    viewText\n    visitTalentBankText\n    visitText\n    whatNewText\n    writeCommentText\n    writeMsgText\n    yesText\n    notApplicableText\n    readyToLearnText\n    startToSoarText\n    pushingForExcellenceText\n    readyToTeachOthersText\n    ratingBeginingText\n    ratingEarlyText\n    ratingComfortableText\n    ratingReadyText\n    ratingGreatStartText\n    ratingExpertiseText\n    ratingConsistentText\n    ratingSavvyText\n    badgeAwardText\n    fiscalYearText\n    avgPerMonthText\n    mostAwardedText\n    leastAwardedText\n    questionText\n    sinceText\n    emailSentText\n    moreResultsText\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETSTATICLABEL</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">94898e59-fe12-4636-8f3a-e542586965d3</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591081565061</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;userDetails&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query userDetails($userId: String!) {\n  getUserDetail(userId: $userId) {\n    firstName\n    lastName\n    city\n    region\n    roles\n    userPicture\n    groups\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">USERDETAILS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">171c6a02-3cc9-45e4-8e24-cde40ba966f6</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591081565073</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Notifications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNotifications&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query getNotifications($userId: String!) {\n  getNotifications(userId: $userId, page: 0, limit: 0) {\n    notificationsCount\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETNOTIFICATIONS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">879c050a-13b0-467e-8ff6-06cc689382d0</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591081565084</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Learning Level Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;learningList&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query learningList {\n  learningList: getLearningPathListing {\n    title\n    description\n    totalPoints\n    progress\n    totalDuration\n    image\n    learningPathId\n    favourites\n    bookmarks\n    userFavouriteStatus\n    userBookmarkStatus\n    points\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">LEARNINGLIST</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">696317d5-8680-496b-970a-dac13cfa7769</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601908415937</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Team Page" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>4.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Static Labels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStaticLabel&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getStaticLabel {\n  StaticLabels: getStaticLabels {\n    otherLabel\n    businessTab\n    policiesTab\n    cultureTab\n    noDocumentsBusinessText\n    noDocumentsPoliciesText\n    noDocumentsCultureText\n    newThisYearLabel\n    allLearnersLabel\n    allSnapshotLabel\n    allSeminarsLabel\n    upcomingLabel\n    completedLabel\n    noRecentActivityText\n    peopleInvitedLabel\n    aboutTab\n    accountsTab\n    additionalCommentsText\n    advancedLearningTab\n    advanceText\n    allBadgesTab\n    allBadgesText\n    allBrandsText\n    allDoorsText\n    allFbGroupLabel\n    allFeatureLabel\n    allLabel\n    allLeadershipText\n    allRegionsText\n    allSpGroupLabel\n    allTopLearnersText\n    anniversaryText\n    anotherErrText\n    archiveTab\n    attachDocumentText\n    attachNewDocMsg\n    avgMonthlyText\n    awardBadgesText\n    awardBadgeText\n    awardedByText\n    badgeAllocatedText\n    badgeAllocationText\n    badgeCategoryText\n    badgeName\n    badgePointsAwardedText\n    badgePtsText\n    badgesAllocationMsg\n    badgesAwardedText\n    badgesAwardedToLearnerText\n    badgesFoundText\n    badgesText\n    badgeText\n    basicLearningTab\n    basicTab\n    birthdayText\n    blogDetailText\n    blogsTab\n    brandErrMsg\n    brandFoundText\n    brandLinkName\n    brandListLabel\n    brandsLabel\n    brandTab\n    brandValuesTab\n    browserNotSupportVideo\n    buttonName\n    calendarName\n    cancelName\n    categoryForEvaluationText\n    categoryName\n    changeLangText\n    classroomTab\n    clearAllText\n    coachingRecommendText\n    coachText\n    comingSoonText\n    commentsText\n    confirmText\n    congratulationsText\n    consumersTab\n    continueText\n    courseLockedText\n    dashboardFeaturedLabel\n    daysLeftText\n    deleteCommentMsg\n    deleteText\n    detailedViewText\n    doneText\n    editText\n    educationInfoText\n    educationName\n    educationTab\n    elcBrandName\n    emailBodyEmptyText\n    emailLabel\n    emailName\n    emailText\n    emptyTemplateMsg\n    englishLabel\n    enterValidEmailText\n    errMsgLanguage\n    errorTemplateMsg\n    errorText\n    errPostedCommentMsg\n    establishedPerformerText\n    evaluateError\n    evaluateName\n    evaluationText\n    evaluatorText\n    exitEvaluationText\n    experiencesAvailText\n    experiencesTab\n    facebookGroupsText\n    featuredProductsAvalText\n    featuredProductsTab\n    featuredProductText\n    featuredText\n    fieldExecutiveText\n    filterText\n    frenchLabel\n    goalManagementText\n    goBackText\n    gotoHomeText\n    historyFoundText\n    historyText\n    hiText\n    influenceText\n    infoBrandValuesText\n    infocusAvailableText\n    infocusName\n    inFocusTab\n    intermediateText\n    interPerformerText\n    itemName\n    joinedOnText\n    knowledgeText\n    leaderboardText\n    leadershipTab\n    learnerBrandDistribText\n    learnerPhotoName\n    learnerProficiencyDistribText\n    learnersBATab\n    learnersFETab\n    learnersFoundText\n    learnersNameText\n    learnersSelectedText\n    learnersText\n    learnerText\n    learningExperienceLabel\n    learningSnapshotText\n    leaveCommentText\n    levelLabel\n    loadingName\n    loginError\n    logoutText\n    mapAvailableText\n    masterText\n    moduleCompletedText\n    moduleCurrLockText\n    moduleRecommendedText\n    modulesCompletedText\n    modulesRecommendToText\n    modulesSelectedText\n    mostAwardedCatText\n    mostRecentEvaluationText\n    myAccountsTab\n    myBadgesLabel\n    myCOEsTab\n    myCompletedModulesText\n    myDevelopmentTab\n    myEarnedBadgesTab\n    myGroupLink\n    myLearnersLabel\n    myPerformanceText\n    myProfileText\n    myRecommendationsText\n    myRoleTab\n    myTeamDetailsText\n    myTeamStatistics\n    myTeamText\n    myTopLearnersText\n    nalxName\n    newLearnersText\n    nextText\n    noBadgesAwardedText\n    noBadgesAwardedYetText\n    noBadgesFoundText\n    noBlogsAvailText\n    noBrandFoundText\n    noBrandValuesText\n    nocategoriesText\n    noCommentText\n    noCompletedModulesText\n    noDataSelectedFilter\n    noDataSelectionText\n    noDocumentsAccText\n    noDocumentsCOEsText\n    noDocumentsConsumersText\n    noDocumentsLeadershipText\n    noDocumentsMyAccText\n    noDocumentsMyDevText\n    noDocumentsRoleText\n    noDocumentsSelfDevText\n    noDocumentsToolsText\n    noDocumentText\n    noDoorsFoundText\n    noEducationText\n    noEngageStoriesText\n    noExperiencesText\n    noFbGroupText\n    noFeaturedProductsText\n    noFeatureLabel\n    noFeedbackSuggestText\n    noHistoryFoundText\n    noImageAttachedText\n    noInfocusText\n    noLeadershipText\n    noLearnersFoundText\n    noLearnersText\n    noMapAvailableText\n    noModulesAvailableText\n    noModulesRecommendText\n    noModulesToRecommendText\n    noNewnessNotifiText\n    noofBadgesText\n    noRecentEvaluationText\n    noRegionsFoundText\n    noRelevantInfoText\n    noResourcesText\n    northAmericaLabel\n    noSeminarsRegionText\n    noSeminarsText\n    noSocialAccText\n    noSpGroupText\n    notAssessedText\n    noTeamMemberText\n    noText\n    notFormattedImage\n    notFoundPageText\n    notificationName\n    notificationsText\n    notifyEvaluationText\n    noTopLearnersText\n    noUpcomingSeminarsLabel\n    noUpcomingSeminarsText\n    noviceText\n    openModalText\n    outofText\n    overText\n    passwordLabel\n    performanceDashboardText\n    personInvitedLabel\n    placeText\n    pointsText\n    policyUnavailableText\n    privacyPolicyText\n    productName\n    proficiencyLevelLabel\n    profileBackgroundImageName\n    profileImageName\n    profileText\n    promotedText\n    promotionLevelMsg\n    promotionMsg\n    promotionText\n    promotionToLevelMsg\n    readMoreText\n    recentActivitiesLabel\n    recentEvaluationText\n    recommendedbyText\n    recommendModulesText\n    recommendText\n    regionsText\n    rememberMeLabel\n    resourcesInfoText\n    resourcesTab\n    resourceTab\n    reviewAvgScoreText\n    reviewName\n    salesResultText\n    searchName\n    searchResultsText\n    searchTermText\n    searchText\n    sectionText\n    selectBadgesMsg\n    selectBrandText\n    selectDoorText\n    selectOptionText\n    selectRegionText\n    selectSeminarText\n    selectText\n    selfDevelopmentTab\n    seminarsText\n    sendingRecommendText\n    sendText\n    sessionExpiredLabel\n    signInLabel\n    snapshotsPerformedText\n    snapshotsText\n    snapshotText\n    socialIconName\n    somethingWentWrongMsg\n    spanishLabel\n    statusErr\n    statusText\n    submitText\n    subText\n    subtitleText\n    successName\n    supportEmailLabel\n    techniqueServiceText\n    titleText\n    toolsTab\n    topBeautyAdvisorsText\n    topFieldExecutivesText\n    topLearnersName\n    topLearnersText\n    totalAvailableText\n    totalBadgesText\n    totalLearnersText\n    totalModulesCompletedText\n    totalSnapshotsText\n    troubleLabel\n    tryAgainText\n    unlockAdvLearningText\n    unlockAdvModuleMsg\n    upcomingSeminarsLabel\n    updateBirthdate\n    updateText\n    uploadPictureText\n    uploadProfilePicMsg\n    userName\n    verifyRecipientText\n    viewAllLabel\n    viewDetailsText\n    viewDocumentText\n    viewExistingDocumentText\n    viewSplashLabel\n    viewText\n    visitTalentBankText\n    visitText\n    whatNewText\n    writeCommentText\n    writeMsgText\n    yesText\n    notApplicableText\n    readyToLearnText\n    startToSoarText\n    pushingForExcellenceText\n    readyToTeachOthersText\n    ratingBeginingText\n    ratingEarlyText\n    ratingComfortableText\n    ratingReadyText\n    ratingGreatStartText\n    ratingExpertiseText\n    ratingConsistentText\n    ratingSavvyText\n    badgeAwardText\n    fiscalYearText\n    avgPerMonthText\n    mostAwardedText\n    leastAwardedText\n    questionText\n    sinceText\n    emailSentText\n    moreResultsText\n    trendingTab\n    noBookmarksText\n    bookmarksText\n    loadMoreText\n    filtersLabel\n    noTredningPostsText\n    learningPathSingularLabel\n    learningPathPluralLabel\n    achievementsLabel\n    noAchievementsText\n    ptsText\n    likesText\n    achievementsCongratsText\n    achievementAwardedText\n    learningModulesText\n    allCategoriesText\n    recommendedText\n    sortText\n    firstQuarterLabel\n    secondQuarterLabel\n    thirdQuarterLabel\n    fourthQuarterLabel\n    unBookmarkText\n    selectYearText\n    badgeHistoryText\n    currentStandingText\n    pointsLeftAwardText\n    pointsAwardedText\n    activityText\n    teamDashboardText\n    modulesSuggestedOrderText\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETSTATICLABEL</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">fac06bee-6b9a-47c0-aeca-c5e2cf434131</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1600686690664</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;userDetails&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query userDetails($userId: String!) {\n  getUserDetail(userId: $userId) {\n    firstName\n    lastName\n    city\n    region\n    roles\n    userPicture\n    groups\n    location\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">USERDETAILS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">6481b1e2-7ca9-4dda-8beb-a9be7bb69066</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1600686690678</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Notifications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNotifications&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query getNotifications($userId: String!) {\n  getNotifications(userId: $userId, page: 0, limit: 0) {\n    notificationsCount\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETNOTIFICATIONS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">66a9e557-0f7d-42b8-8327-4ddf35d77da0</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1600686690686</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="My Team Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;feMyTeamDetailsQuery&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query feMyTeamDetailsQuery($userId: String!) {\n  feMyTeamDetailsData: getFEMyTeamDetails(userId: $userId) {\n    learners {\n      totalBa\n      latestUser\n      __typename\n    }\n    badges {\n      totalBa: totalBadgeCount\n      onAverage: averageCount\n      __typename\n    }\n    snapshot {\n      snapshotAverage\n      snapshotTotal\n      __typename\n    }\n    points {\n      pointsAwarded\n      kitty\n      daysLeft\n      pointsPercentage\n      daysElapsed\n      fiscalYear\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">FEMYTEAMDETAILSQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">02833de6-f46b-4ec9-bbbb-e5d81ef3c19a</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1600686690711</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="My Team Skills" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;feMyTeamSkillQuery&quot;,&quot;variables&quot;:{&quot;brandId&quot;:&quot;brands&quot;},&quot;query&quot;:&quot;query feMyTeamSkillQuery($brandId: String) {\n  feMyTeamSkillData: getFEMyTeamSkill(brandId: $brandId) {\n    name\n    count\n    percent\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">FEMYTEAMSKILLQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">37f4810b-cda4-46ed-a63c-3f82edea368c</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1600686690715</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="My Team Brand Query" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;feMyTeamBrandQuery&quot;,&quot;variables&quot;:{&quot;type&quot;:&quot;learners&quot;,&quot;allBrand&quot;:false},&quot;query&quot;:&quot;query feMyTeamBrandQuery($type: String, $allBrand: String) {\n  feMyTeamBrandData: getFEMyTeamBrand(type: $type, allBrand: $allBrand) {\n    name\n    count\n    percent\n    brandColor\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">FEMYTEAMBRANDQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">21262f72-4c2c-4a72-ae8b-8dec22aab55e</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1600686690719</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Recent Activities" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;recentActivitiesQuery&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;,&quot;userType&quot;:&quot;Learner&quot;},&quot;query&quot;:&quot;query recentActivitiesQuery($userId: String!, $userType: String!) {\n  recentActivities: getRecentActivities(userId: $userId, userType: $userType) {\n    name\n    date\n    operationType\n    categoryName\n    vertical1Score\n    vertical2Score\n    vertical3Score\n    moduleName\n    badgeName\n    badgeImage\n    badgePoints\n    badgeDescription\n    vertical1Comment\n    vertical2Comment\n    vertical3Comment\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">RECENTACTIVITIESQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">031d2663-767b-4e5f-9a94-dfdd5d0d678a</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1600686690726</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Learner List" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;feLearnerList&quot;,&quot;variables&quot;:{&quot;feId&quot;:&quot;${UserId}&quot;,&quot;page&quot;:0,&quot;limit&quot;:0,&quot;search&quot;:&quot;&quot;,&quot;filter&quot;:&quot;&quot;,&quot;door&quot;:&quot;&quot;,&quot;region&quot;:&quot;&quot;},&quot;query&quot;:&quot;query feLearnerList($feId: String!, $page: Int!, $limit: Int!, $search: String!, $filter: String!, $door: String!, $region: String!) {\n  feLearnerList: getMyTeamDetail(userId: $feId, page: $page, limit: $limit, search: $search, filter: $filter, door: $door, region: $region) {\n    userImage\n    firstName: firstName\n    lastName: lastName\n    designation: role\n    area\n    region\n    userId\n    memberId\n    brandId\n    brandNames\n    doorId\n    doorName\n    role\n    rank\n    updatedOn\n    snapshot\n    proficiencyScore\n    badgesPoints\n    totalCount\n    badges {\n      badgeId\n      badgeName\n      badgeCount\n      badgeImage\n      sum\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">FELEARNERLIST</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">831c5064-6c0d-4705-99f6-0e4fa5e2f5ae</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1600686690731</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Blog Listing Page" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>4.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Static Labels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStaticLabel&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getStaticLabel {\n  StaticLabels: getStaticLabels {\n    otherLabel\n    businessTab\n    policiesTab\n    cultureTab\n    noDocumentsBusinessText\n    noDocumentsPoliciesText\n    noDocumentsCultureText\n    newThisYearLabel\n    allLearnersLabel\n    allSnapshotLabel\n    allSeminarsLabel\n    upcomingLabel\n    completedLabel\n    noRecentActivityText\n    peopleInvitedLabel\n    aboutTab\n    accountsTab\n    additionalCommentsText\n    advancedLearningTab\n    advanceText\n    allBadgesTab\n    allBadgesText\n    allBrandsText\n    allDoorsText\n    allFbGroupLabel\n    allFeatureLabel\n    allLabel\n    allLeadershipText\n    allRegionsText\n    allSpGroupLabel\n    allTopLearnersText\n    anniversaryText\n    anotherErrText\n    archiveTab\n    attachDocumentText\n    attachNewDocMsg\n    avgMonthlyText\n    awardBadgesText\n    awardBadgeText\n    awardedByText\n    badgeAllocatedText\n    badgeAllocationText\n    badgeCategoryText\n    badgeName\n    badgePointsAwardedText\n    badgePtsText\n    badgesAllocationMsg\n    badgesAwardedText\n    badgesAwardedToLearnerText\n    badgesFoundText\n    badgesText\n    badgeText\n    basicLearningTab\n    basicTab\n    birthdayText\n    blogDetailText\n    blogsTab\n    brandErrMsg\n    brandFoundText\n    brandLinkName\n    brandListLabel\n    brandsLabel\n    brandTab\n    brandValuesTab\n    browserNotSupportVideo\n    buttonName\n    calendarName\n    cancelName\n    categoryForEvaluationText\n    categoryName\n    changeLangText\n    classroomTab\n    clearAllText\n    coachingRecommendText\n    coachText\n    comingSoonText\n    commentsText\n    confirmText\n    congratulationsText\n    consumersTab\n    continueText\n    courseLockedText\n    dashboardFeaturedLabel\n    daysLeftText\n    deleteCommentMsg\n    deleteText\n    detailedViewText\n    doneText\n    editText\n    educationInfoText\n    educationName\n    educationTab\n    elcBrandName\n    emailBodyEmptyText\n    emailLabel\n    emailName\n    emailText\n    emptyTemplateMsg\n    englishLabel\n    enterValidEmailText\n    errMsgLanguage\n    errorTemplateMsg\n    errorText\n    errPostedCommentMsg\n    establishedPerformerText\n    evaluateError\n    evaluateName\n    evaluationText\n    evaluatorText\n    exitEvaluationText\n    experiencesAvailText\n    experiencesTab\n    facebookGroupsText\n    featuredProductsAvalText\n    featuredProductsTab\n    featuredProductText\n    featuredText\n    fieldExecutiveText\n    filterText\n    frenchLabel\n    goalManagementText\n    goBackText\n    gotoHomeText\n    historyFoundText\n    historyText\n    hiText\n    influenceText\n    infoBrandValuesText\n    infocusAvailableText\n    infocusName\n    inFocusTab\n    intermediateText\n    interPerformerText\n    itemName\n    joinedOnText\n    knowledgeText\n    leaderboardText\n    leadershipTab\n    learnerBrandDistribText\n    learnerPhotoName\n    learnerProficiencyDistribText\n    learnersBATab\n    learnersFETab\n    learnersFoundText\n    learnersNameText\n    learnersSelectedText\n    learnersText\n    learnerText\n    learningExperienceLabel\n    learningSnapshotText\n    leaveCommentText\n    levelLabel\n    loadingName\n    loginError\n    logoutText\n    mapAvailableText\n    masterText\n    moduleCompletedText\n    moduleCurrLockText\n    moduleRecommendedText\n    modulesCompletedText\n    modulesRecommendToText\n    modulesSelectedText\n    mostAwardedCatText\n    mostRecentEvaluationText\n    myAccountsTab\n    myBadgesLabel\n    myCOEsTab\n    myCompletedModulesText\n    myDevelopmentTab\n    myEarnedBadgesTab\n    myGroupLink\n    myLearnersLabel\n    myPerformanceText\n    myProfileText\n    myRecommendationsText\n    myRoleTab\n    myTeamDetailsText\n    myTeamStatistics\n    myTeamText\n    myTopLearnersText\n    nalxName\n    newLearnersText\n    nextText\n    noBadgesAwardedText\n    noBadgesAwardedYetText\n    noBadgesFoundText\n    noBlogsAvailText\n    noBrandFoundText\n    noBrandValuesText\n    nocategoriesText\n    noCommentText\n    noCompletedModulesText\n    noDataSelectedFilter\n    noDataSelectionText\n    noDocumentsAccText\n    noDocumentsCOEsText\n    noDocumentsConsumersText\n    noDocumentsLeadershipText\n    noDocumentsMyAccText\n    noDocumentsMyDevText\n    noDocumentsRoleText\n    noDocumentsSelfDevText\n    noDocumentsToolsText\n    noDocumentText\n    noDoorsFoundText\n    noEducationText\n    noEngageStoriesText\n    noExperiencesText\n    noFbGroupText\n    noFeaturedProductsText\n    noFeatureLabel\n    noFeedbackSuggestText\n    noHistoryFoundText\n    noImageAttachedText\n    noInfocusText\n    noLeadershipText\n    noLearnersFoundText\n    noLearnersText\n    noMapAvailableText\n    noModulesAvailableText\n    noModulesRecommendText\n    noModulesToRecommendText\n    noNewnessNotifiText\n    noofBadgesText\n    noRecentEvaluationText\n    noRegionsFoundText\n    noRelevantInfoText\n    noResourcesText\n    northAmericaLabel\n    noSeminarsRegionText\n    noSeminarsText\n    noSocialAccText\n    noSpGroupText\n    notAssessedText\n    noTeamMemberText\n    noText\n    notFormattedImage\n    notFoundPageText\n    notificationName\n    notificationsText\n    notifyEvaluationText\n    noTopLearnersText\n    noUpcomingSeminarsLabel\n    noUpcomingSeminarsText\n    noviceText\n    openModalText\n    outofText\n    overText\n    passwordLabel\n    performanceDashboardText\n    personInvitedLabel\n    placeText\n    pointsText\n    policyUnavailableText\n    privacyPolicyText\n    productName\n    proficiencyLevelLabel\n    profileBackgroundImageName\n    profileImageName\n    profileText\n    promotedText\n    promotionLevelMsg\n    promotionMsg\n    promotionText\n    promotionToLevelMsg\n    readMoreText\n    recentActivitiesLabel\n    recentEvaluationText\n    recommendedbyText\n    recommendModulesText\n    recommendText\n    regionsText\n    rememberMeLabel\n    resourcesInfoText\n    resourcesTab\n    resourceTab\n    reviewAvgScoreText\n    reviewName\n    salesResultText\n    searchName\n    searchResultsText\n    searchTermText\n    searchText\n    sectionText\n    selectBadgesMsg\n    selectBrandText\n    selectDoorText\n    selectOptionText\n    selectRegionText\n    selectSeminarText\n    selectText\n    selfDevelopmentTab\n    seminarsText\n    sendingRecommendText\n    sendText\n    sessionExpiredLabel\n    signInLabel\n    snapshotsPerformedText\n    snapshotsText\n    snapshotText\n    socialIconName\n    somethingWentWrongMsg\n    spanishLabel\n    statusErr\n    statusText\n    submitText\n    subText\n    subtitleText\n    successName\n    supportEmailLabel\n    techniqueServiceText\n    titleText\n    toolsTab\n    topBeautyAdvisorsText\n    topFieldExecutivesText\n    topLearnersName\n    topLearnersText\n    totalAvailableText\n    totalBadgesText\n    totalLearnersText\n    totalModulesCompletedText\n    totalSnapshotsText\n    troubleLabel\n    tryAgainText\n    unlockAdvLearningText\n    unlockAdvModuleMsg\n    upcomingSeminarsLabel\n    updateBirthdate\n    updateText\n    uploadPictureText\n    uploadProfilePicMsg\n    userName\n    verifyRecipientText\n    viewAllLabel\n    viewDetailsText\n    viewDocumentText\n    viewExistingDocumentText\n    viewSplashLabel\n    viewText\n    visitTalentBankText\n    visitText\n    whatNewText\n    writeCommentText\n    writeMsgText\n    yesText\n    notApplicableText\n    readyToLearnText\n    startToSoarText\n    pushingForExcellenceText\n    readyToTeachOthersText\n    ratingBeginingText\n    ratingEarlyText\n    ratingComfortableText\n    ratingReadyText\n    ratingGreatStartText\n    ratingExpertiseText\n    ratingConsistentText\n    ratingSavvyText\n    badgeAwardText\n    fiscalYearText\n    avgPerMonthText\n    mostAwardedText\n    leastAwardedText\n    questionText\n    sinceText\n    emailSentText\n    moreResultsText\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETSTATICLABEL</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">e1cf765b-d960-4ae2-b696-d30867612a9b</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591104058995</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;userDetails&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query userDetails($userId: String!) {\n  getUserDetail(userId: $userId) {\n    firstName\n    lastName\n    city\n    region\n    roles\n    userPicture\n    groups\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">USERDETAILS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">2cc55fe3-2ce6-4d8c-a8b8-77216dd7a4b5</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591104059006</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Notifications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNotifications&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query getNotifications($userId: String!) {\n  getNotifications(userId: $userId, page: 0, limit: 0) {\n    notificationsCount\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETNOTIFICATIONS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">affb7598-cc25-4c65-ac53-1f4760efdfe2</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591104059019</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Blog Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;blogList&quot;,&quot;variables&quot;:{&quot;page&quot;:3,&quot;limit&quot;:10},&quot;query&quot;:&quot;query blogList($page: Int!, $limit: Int!) {\n  blogList: getBlogList(page: $page, limit: $limit) {\n    results {\n      nid\n      image\n      title\n      changed\n      count\n      summary\n      __typename\n    }\n    pager {\n      currentPage\n      itemPerPage\n      totalItems\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">BLOGLIST</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">50d58807-86a6-4821-9d97-75fad8c087bb</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591104071557</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="My Profile Page" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Learner" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">learner/210487/0/fe</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">0.0</stringProp>
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Static Labels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStaticLabel&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getStaticLabel {\n  StaticLabels: getStaticLabels {\n    otherLabel\n    businessTab\n    policiesTab\n    cultureTab\n    noDocumentsBusinessText\n    noDocumentsPoliciesText\n    noDocumentsCultureText\n    newThisYearLabel\n    allLearnersLabel\n    allSnapshotLabel\n    allSeminarsLabel\n    upcomingLabel\n    completedLabel\n    noRecentActivityText\n    peopleInvitedLabel\n    aboutTab\n    accountsTab\n    additionalCommentsText\n    advancedLearningTab\n    advanceText\n    allBadgesTab\n    allBadgesText\n    allBrandsText\n    allDoorsText\n    allFbGroupLabel\n    allFeatureLabel\n    allLabel\n    allLeadershipText\n    allRegionsText\n    allSpGroupLabel\n    allTopLearnersText\n    anniversaryText\n    anotherErrText\n    archiveTab\n    attachDocumentText\n    attachNewDocMsg\n    avgMonthlyText\n    awardBadgesText\n    awardBadgeText\n    awardedByText\n    badgeAllocatedText\n    badgeAllocationText\n    badgeCategoryText\n    badgeName\n    badgePointsAwardedText\n    badgePtsText\n    badgesAllocationMsg\n    badgesAwardedText\n    badgesAwardedToLearnerText\n    badgesFoundText\n    badgesText\n    badgeText\n    basicLearningTab\n    basicTab\n    birthdayText\n    blogDetailText\n    blogsTab\n    brandErrMsg\n    brandFoundText\n    brandLinkName\n    brandListLabel\n    brandsLabel\n    brandTab\n    brandValuesTab\n    browserNotSupportVideo\n    buttonName\n    calendarName\n    cancelName\n    categoryForEvaluationText\n    categoryName\n    changeLangText\n    classroomTab\n    clearAllText\n    coachingRecommendText\n    coachText\n    comingSoonText\n    commentsText\n    confirmText\n    congratulationsText\n    consumersTab\n    continueText\n    courseLockedText\n    dashboardFeaturedLabel\n    daysLeftText\n    deleteCommentMsg\n    deleteText\n    detailedViewText\n    doneText\n    editText\n    educationInfoText\n    educationName\n    educationTab\n    elcBrandName\n    emailBodyEmptyText\n    emailLabel\n    emailName\n    emailText\n    emptyTemplateMsg\n    englishLabel\n    enterValidEmailText\n    errMsgLanguage\n    errorTemplateMsg\n    errorText\n    errPostedCommentMsg\n    establishedPerformerText\n    evaluateError\n    evaluateName\n    evaluationText\n    evaluatorText\n    exitEvaluationText\n    experiencesAvailText\n    experiencesTab\n    facebookGroupsText\n    featuredProductsAvalText\n    featuredProductsTab\n    featuredProductText\n    featuredText\n    fieldExecutiveText\n    filterText\n    frenchLabel\n    goalManagementText\n    goBackText\n    gotoHomeText\n    historyFoundText\n    historyText\n    hiText\n    influenceText\n    infoBrandValuesText\n    infocusAvailableText\n    infocusName\n    inFocusTab\n    intermediateText\n    interPerformerText\n    itemName\n    joinedOnText\n    knowledgeText\n    leaderboardText\n    leadershipTab\n    learnerBrandDistribText\n    learnerPhotoName\n    learnerProficiencyDistribText\n    learnersBATab\n    learnersFETab\n    learnersFoundText\n    learnersNameText\n    learnersSelectedText\n    learnersText\n    learnerText\n    learningExperienceLabel\n    learningSnapshotText\n    leaveCommentText\n    levelLabel\n    loadingName\n    loginError\n    logoutText\n    mapAvailableText\n    masterText\n    moduleCompletedText\n    moduleCurrLockText\n    moduleRecommendedText\n    modulesCompletedText\n    modulesRecommendToText\n    modulesSelectedText\n    mostAwardedCatText\n    mostRecentEvaluationText\n    myAccountsTab\n    myBadgesLabel\n    myCOEsTab\n    myCompletedModulesText\n    myDevelopmentTab\n    myEarnedBadgesTab\n    myGroupLink\n    myLearnersLabel\n    myPerformanceText\n    myProfileText\n    myRecommendationsText\n    myRoleTab\n    myTeamDetailsText\n    myTeamStatistics\n    myTeamText\n    myTopLearnersText\n    nalxName\n    newLearnersText\n    nextText\n    noBadgesAwardedText\n    noBadgesAwardedYetText\n    noBadgesFoundText\n    noBlogsAvailText\n    noBrandFoundText\n    noBrandValuesText\n    nocategoriesText\n    noCommentText\n    noCompletedModulesText\n    noDataSelectedFilter\n    noDataSelectionText\n    noDocumentsAccText\n    noDocumentsCOEsText\n    noDocumentsConsumersText\n    noDocumentsLeadershipText\n    noDocumentsMyAccText\n    noDocumentsMyDevText\n    noDocumentsRoleText\n    noDocumentsSelfDevText\n    noDocumentsToolsText\n    noDocumentText\n    noDoorsFoundText\n    noEducationText\n    noEngageStoriesText\n    noExperiencesText\n    noFbGroupText\n    noFeaturedProductsText\n    noFeatureLabel\n    noFeedbackSuggestText\n    noHistoryFoundText\n    noImageAttachedText\n    noInfocusText\n    noLeadershipText\n    noLearnersFoundText\n    noLearnersText\n    noMapAvailableText\n    noModulesAvailableText\n    noModulesRecommendText\n    noModulesToRecommendText\n    noNewnessNotifiText\n    noofBadgesText\n    noRecentEvaluationText\n    noRegionsFoundText\n    noRelevantInfoText\n    noResourcesText\n    northAmericaLabel\n    noSeminarsRegionText\n    noSeminarsText\n    noSocialAccText\n    noSpGroupText\n    notAssessedText\n    noTeamMemberText\n    noText\n    notFormattedImage\n    notFoundPageText\n    notificationName\n    notificationsText\n    notifyEvaluationText\n    noTopLearnersText\n    noUpcomingSeminarsLabel\n    noUpcomingSeminarsText\n    noviceText\n    openModalText\n    outofText\n    overText\n    passwordLabel\n    performanceDashboardText\n    personInvitedLabel\n    placeText\n    pointsText\n    policyUnavailableText\n    privacyPolicyText\n    productName\n    proficiencyLevelLabel\n    profileBackgroundImageName\n    profileImageName\n    profileText\n    promotedText\n    promotionLevelMsg\n    promotionMsg\n    promotionText\n    promotionToLevelMsg\n    readMoreText\n    recentActivitiesLabel\n    recentEvaluationText\n    recommendedbyText\n    recommendModulesText\n    recommendText\n    regionsText\n    rememberMeLabel\n    resourcesInfoText\n    resourcesTab\n    resourceTab\n    reviewAvgScoreText\n    reviewName\n    salesResultText\n    searchName\n    searchResultsText\n    searchTermText\n    searchText\n    sectionText\n    selectBadgesMsg\n    selectBrandText\n    selectDoorText\n    selectOptionText\n    selectRegionText\n    selectSeminarText\n    selectText\n    selfDevelopmentTab\n    seminarsText\n    sendingRecommendText\n    sendText\n    sessionExpiredLabel\n    signInLabel\n    snapshotsPerformedText\n    snapshotsText\n    snapshotText\n    socialIconName\n    somethingWentWrongMsg\n    spanishLabel\n    statusErr\n    statusText\n    submitText\n    subText\n    subtitleText\n    successName\n    supportEmailLabel\n    techniqueServiceText\n    titleText\n    toolsTab\n    topBeautyAdvisorsText\n    topFieldExecutivesText\n    topLearnersName\n    topLearnersText\n    totalAvailableText\n    totalBadgesText\n    totalLearnersText\n    totalModulesCompletedText\n    totalSnapshotsText\n    troubleLabel\n    tryAgainText\n    unlockAdvLearningText\n    unlockAdvModuleMsg\n    upcomingSeminarsLabel\n    updateBirthdate\n    updateText\n    uploadPictureText\n    uploadProfilePicMsg\n    userName\n    verifyRecipientText\n    viewAllLabel\n    viewDetailsText\n    viewDocumentText\n    viewExistingDocumentText\n    viewSplashLabel\n    viewText\n    visitTalentBankText\n    visitText\n    whatNewText\n    writeCommentText\n    writeMsgText\n    yesText\n    notApplicableText\n    readyToLearnText\n    startToSoarText\n    pushingForExcellenceText\n    readyToTeachOthersText\n    ratingBeginingText\n    ratingEarlyText\n    ratingComfortableText\n    ratingReadyText\n    ratingGreatStartText\n    ratingExpertiseText\n    ratingConsistentText\n    ratingSavvyText\n    badgeAwardText\n    fiscalYearText\n    avgPerMonthText\n    mostAwardedText\n    leastAwardedText\n    questionText\n    sinceText\n    emailSentText\n    moreResultsText\n    trendingTab\n    noBookmarksText\n    bookmarksText\n    loadMoreText\n    filtersLabel\n    noTredningPostsText\n    learningPathSingularLabel\n    learningPathPluralLabel\n    achievementsLabel\n    noAchievementsText\n    ptsText\n    likesText\n    achievementsCongratsText\n    achievementAwardedText\n    learningModulesText\n    allCategoriesText\n    recommendedText\n    sortText\n    firstQuarterLabel\n    secondQuarterLabel\n    thirdQuarterLabel\n    fourthQuarterLabel\n    unBookmarkText\n    selectYearText\n    badgeHistoryText\n    currentStandingText\n    pointsLeftAwardText\n    pointsAwardedText\n    activityText\n    teamDashboardText\n    modulesSuggestedOrderText\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETSTATICLABEL</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">060f19fcc8851a51a0ac264b1dbb74ddd80561857b1ecf56ac07150a51296e83</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI3NGI1ZDE4YS02MGRmLTQ4ZWItYTQ2Ny1jNDJkMjJkY2E1N2EiLCJqdGkiOiI4NjMxODIxZWExYzlkYjUzODVjMTRkYzQzYzc1ZmE2YWEwMDE0MjAyODk1ODIwYzc1Y2VmYWNlNjQzMTJiNWMyOWY2ZTk5NGIzNjI4MDI0ZSIsImlhdCI6MTYwMDY4NjM4MiwibmJmIjoxNjAwNjg2MzgyLCJleHAiOjE2MDE1NTAzODIsInN1YiI6IjIxMDQ4NyIsInNjb3BlcyI6WyJhdXRoZW50aWNhdGVkIl19.OPDktcYwQ-LLver6LNOyr9QyxDaDZ0o5dRNm7_gCokhqKF9qc-67IMMGCgy_36IujWowFZl-luS2Vz8N-kxHYh5S2G62zTwcColKQZ3esDGJYHpABvq_wQ8LpJ8UUo-IGb9F5fCAAOn7qeIoml4zLqMPMTOA-vt4uKKF7o5mqdoLhFEf4NqShrEIEYMdNGe8Z6eBS-s0tOV2C4V0OIQWxe5I4P2S1bYevu8qghXvRDzNkyHln0dpBxUBGbFOAzRQekCSTEOcRZAEBrGguOxgHoSR0yQMf6uNc3RjDWy-iP86-rpmWffZXI82iXqqNjPLGHXVxVpMjZWSFubZn2jQpg</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">55712b2e-2209-4b91-9e41-3253474538d0</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1600690857038</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;userDetails&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query userDetails($userId: String!) {\n  getUserDetail(userId: $userId) {\n    firstName\n    lastName\n    city\n    region\n    roles\n    userPicture\n    groups\n    location\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">USERDETAILS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">060f19fcc8851a51a0ac264b1dbb74ddd80561857b1ecf56ac07150a51296e83</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI3NGI1ZDE4YS02MGRmLTQ4ZWItYTQ2Ny1jNDJkMjJkY2E1N2EiLCJqdGkiOiI4NjMxODIxZWExYzlkYjUzODVjMTRkYzQzYzc1ZmE2YWEwMDE0MjAyODk1ODIwYzc1Y2VmYWNlNjQzMTJiNWMyOWY2ZTk5NGIzNjI4MDI0ZSIsImlhdCI6MTYwMDY4NjM4MiwibmJmIjoxNjAwNjg2MzgyLCJleHAiOjE2MDE1NTAzODIsInN1YiI6IjIxMDQ4NyIsInNjb3BlcyI6WyJhdXRoZW50aWNhdGVkIl19.OPDktcYwQ-LLver6LNOyr9QyxDaDZ0o5dRNm7_gCokhqKF9qc-67IMMGCgy_36IujWowFZl-luS2Vz8N-kxHYh5S2G62zTwcColKQZ3esDGJYHpABvq_wQ8LpJ8UUo-IGb9F5fCAAOn7qeIoml4zLqMPMTOA-vt4uKKF7o5mqdoLhFEf4NqShrEIEYMdNGe8Z6eBS-s0tOV2C4V0OIQWxe5I4P2S1bYevu8qghXvRDzNkyHln0dpBxUBGbFOAzRQekCSTEOcRZAEBrGguOxgHoSR0yQMf6uNc3RjDWy-iP86-rpmWffZXI82iXqqNjPLGHXVxVpMjZWSFubZn2jQpg</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">4cd14a83-6f43-4c8a-a32c-52050139f7ef</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1600690857053</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Notifications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNotifications&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query getNotifications($userId: String!) {\n  getNotifications(userId: $userId, page: 0, limit: 0) {\n    notificationsCount\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETNOTIFICATIONS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">060f19fcc8851a51a0ac264b1dbb74ddd80561857b1ecf56ac07150a51296e83</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI3NGI1ZDE4YS02MGRmLTQ4ZWItYTQ2Ny1jNDJkMjJkY2E1N2EiLCJqdGkiOiI4NjMxODIxZWExYzlkYjUzODVjMTRkYzQzYzc1ZmE2YWEwMDE0MjAyODk1ODIwYzc1Y2VmYWNlNjQzMTJiNWMyOWY2ZTk5NGIzNjI4MDI0ZSIsImlhdCI6MTYwMDY4NjM4MiwibmJmIjoxNjAwNjg2MzgyLCJleHAiOjE2MDE1NTAzODIsInN1YiI6IjIxMDQ4NyIsInNjb3BlcyI6WyJhdXRoZW50aWNhdGVkIl19.OPDktcYwQ-LLver6LNOyr9QyxDaDZ0o5dRNm7_gCokhqKF9qc-67IMMGCgy_36IujWowFZl-luS2Vz8N-kxHYh5S2G62zTwcColKQZ3esDGJYHpABvq_wQ8LpJ8UUo-IGb9F5fCAAOn7qeIoml4zLqMPMTOA-vt4uKKF7o5mqdoLhFEf4NqShrEIEYMdNGe8Z6eBS-s0tOV2C4V0OIQWxe5I4P2S1bYevu8qghXvRDzNkyHln0dpBxUBGbFOAzRQekCSTEOcRZAEBrGguOxgHoSR0yQMf6uNc3RjDWy-iP86-rpmWffZXI82iXqqNjPLGHXVxVpMjZWSFubZn2jQpg</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">897c12c6-013a-479f-8858-35ccc76a610c</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1600690857060</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dashboard Learner User Profile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;dashboardLearnerUserProfile&quot;,&quot;variables&quot;:{&quot;beautyAdvisorId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query dashboardLearnerUserProfile($beautyAdvisorId: String!) {\n  dashboardLearnerUserProfile: getEvaluationBADetails(beautyAdvisorId: $beautyAdvisorId) {\n    firstName\n    lastName\n    role\n    store: brandName\n    area\n    region\n    dob\n    img: userPicture\n    doj: joinedDate\n    doa: anniversaryDate\n    learnerCount\n    feId\n    feName\n    feImage\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">DASHBOARDLEARNERUSERPROFILE</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">060f19fcc8851a51a0ac264b1dbb74ddd80561857b1ecf56ac07150a51296e83</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI3NGI1ZDE4YS02MGRmLTQ4ZWItYTQ2Ny1jNDJkMjJkY2E1N2EiLCJqdGkiOiI4NjMxODIxZWExYzlkYjUzODVjMTRkYzQzYzc1ZmE2YWEwMDE0MjAyODk1ODIwYzc1Y2VmYWNlNjQzMTJiNWMyOWY2ZTk5NGIzNjI4MDI0ZSIsImlhdCI6MTYwMDY4NjM4MiwibmJmIjoxNjAwNjg2MzgyLCJleHAiOjE2MDE1NTAzODIsInN1YiI6IjIxMDQ4NyIsInNjb3BlcyI6WyJhdXRoZW50aWNhdGVkIl19.OPDktcYwQ-LLver6LNOyr9QyxDaDZ0o5dRNm7_gCokhqKF9qc-67IMMGCgy_36IujWowFZl-luS2Vz8N-kxHYh5S2G62zTwcColKQZ3esDGJYHpABvq_wQ8LpJ8UUo-IGb9F5fCAAOn7qeIoml4zLqMPMTOA-vt4uKKF7o5mqdoLhFEf4NqShrEIEYMdNGe8Z6eBS-s0tOV2C4V0OIQWxe5I4P2S1bYevu8qghXvRDzNkyHln0dpBxUBGbFOAzRQekCSTEOcRZAEBrGguOxgHoSR0yQMf6uNc3RjDWy-iP86-rpmWffZXI82iXqqNjPLGHXVxVpMjZWSFubZn2jQpg</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">572a91ba-7e87-44b6-8f70-7934b89110aa</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1600690857088</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Profile Menu" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;userProfileMenu&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query userProfileMenu {\n  getUserProfileMenu {\n    name\n    icon\n    type\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-USER-LANG" elementType="Header">
                  <stringProp name="Header.name">X-USER-LANG</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">USERPROFILEMENU</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-USER" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-USER</stringProp>
                  <stringProp name="Header.value">060f19fcc8851a51a0ac264b1dbb74ddd80561857b1ecf56ac07150a51296e83</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-AUTH-TOKEN" elementType="Header">
                  <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                  <stringProp name="Header.value">eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI3NGI1ZDE4YS02MGRmLTQ4ZWItYTQ2Ny1jNDJkMjJkY2E1N2EiLCJqdGkiOiI4NjMxODIxZWExYzlkYjUzODVjMTRkYzQzYzc1ZmE2YWEwMDE0MjAyODk1ODIwYzc1Y2VmYWNlNjQzMTJiNWMyOWY2ZTk5NGIzNjI4MDI0ZSIsImlhdCI6MTYwMDY4NjM4MiwibmJmIjoxNjAwNjg2MzgyLCJleHAiOjE2MDE1NTAzODIsInN1YiI6IjIxMDQ4NyIsInNjb3BlcyI6WyJhdXRoZW50aWNhdGVkIl19.OPDktcYwQ-LLver6LNOyr9QyxDaDZ0o5dRNm7_gCokhqKF9qc-67IMMGCgy_36IujWowFZl-luS2Vz8N-kxHYh5S2G62zTwcColKQZ3esDGJYHpABvq_wQ8LpJ8UUo-IGb9F5fCAAOn7qeIoml4zLqMPMTOA-vt4uKKF7o5mqdoLhFEf4NqShrEIEYMdNGe8Z6eBS-s0tOV2C4V0OIQWxe5I4P2S1bYevu8qghXvRDzNkyHln0dpBxUBGbFOAzRQekCSTEOcRZAEBrGguOxgHoSR0yQMf6uNc3RjDWy-iP86-rpmWffZXI82iXqqNjPLGHXVxVpMjZWSFubZn2jQpg</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">fb7b70af-3d07-4951-97a0-9bb7b4641480</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1600690857091</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Notifications Icon" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Notifications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;notifications&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;,&quot;page&quot;:0,&quot;limit&quot;:0},&quot;query&quot;:&quot;query notifications($userId: String, $page: Int, $limit: Int) {\n  notificationList: getNotifications(userId: $userId, page: $page, limit: $limit) {\n    notificationsCount\n    notifications {\n      category\n      contentType\n      notificationId\n      notificationType\n      userId\n      notificationHeading\n      notificationText\n      notificationIcon\n      notificationDate\n      notificationLink\n      notificationFlag\n      notificationClassroomLevelId\n      notificationClassroomContentId\n      notificationLinkType\n      notificationBrandId\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Search Icon" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>2.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Static Labels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStaticLabel&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getStaticLabel {\n  StaticLabels: getStaticLabels {\n    otherLabel\n    businessTab\n    policiesTab\n    cultureTab\n    noDocumentsBusinessText\n    noDocumentsPoliciesText\n    noDocumentsCultureText\n    newThisYearLabel\n    allLearnersLabel\n    allSnapshotLabel\n    allSeminarsLabel\n    upcomingLabel\n    completedLabel\n    noRecentActivityText\n    peopleInvitedLabel\n    aboutTab\n    accountsTab\n    additionalCommentsText\n    advancedLearningTab\n    advanceText\n    allBadgesTab\n    allBadgesText\n    allBrandsText\n    allDoorsText\n    allFbGroupLabel\n    allFeatureLabel\n    allLabel\n    allLeadershipText\n    allRegionsText\n    allSpGroupLabel\n    allTopLearnersText\n    anniversaryText\n    anotherErrText\n    archiveTab\n    attachDocumentText\n    attachNewDocMsg\n    avgMonthlyText\n    awardBadgesText\n    awardBadgeText\n    awardedByText\n    badgeAllocatedText\n    badgeAllocationText\n    badgeCategoryText\n    badgeName\n    badgePointsAwardedText\n    badgePtsText\n    badgesAllocationMsg\n    badgesAwardedText\n    badgesAwardedToLearnerText\n    badgesFoundText\n    badgesText\n    badgeText\n    basicLearningTab\n    basicTab\n    birthdayText\n    blogDetailText\n    blogsTab\n    brandErrMsg\n    brandFoundText\n    brandLinkName\n    brandListLabel\n    brandsLabel\n    brandTab\n    brandValuesTab\n    browserNotSupportVideo\n    buttonName\n    calendarName\n    cancelName\n    categoryForEvaluationText\n    categoryName\n    changeLangText\n    classroomTab\n    clearAllText\n    coachingRecommendText\n    coachText\n    comingSoonText\n    commentsText\n    confirmText\n    congratulationsText\n    consumersTab\n    continueText\n    courseLockedText\n    dashboardFeaturedLabel\n    daysLeftText\n    deleteCommentMsg\n    deleteText\n    detailedViewText\n    doneText\n    editText\n    educationInfoText\n    educationName\n    educationTab\n    elcBrandName\n    emailBodyEmptyText\n    emailLabel\n    emailName\n    emailText\n    emptyTemplateMsg\n    englishLabel\n    enterValidEmailText\n    errMsgLanguage\n    errorTemplateMsg\n    errorText\n    errPostedCommentMsg\n    establishedPerformerText\n    evaluateError\n    evaluateName\n    evaluationText\n    evaluatorText\n    exitEvaluationText\n    experiencesAvailText\n    experiencesTab\n    facebookGroupsText\n    featuredProductsAvalText\n    featuredProductsTab\n    featuredProductText\n    featuredText\n    fieldExecutiveText\n    filterText\n    frenchLabel\n    goalManagementText\n    goBackText\n    gotoHomeText\n    historyFoundText\n    historyText\n    hiText\n    influenceText\n    infoBrandValuesText\n    infocusAvailableText\n    infocusName\n    inFocusTab\n    intermediateText\n    interPerformerText\n    itemName\n    joinedOnText\n    knowledgeText\n    leaderboardText\n    leadershipTab\n    learnerBrandDistribText\n    learnerPhotoName\n    learnerProficiencyDistribText\n    learnersBATab\n    learnersFETab\n    learnersFoundText\n    learnersNameText\n    learnersSelectedText\n    learnersText\n    learnerText\n    learningExperienceLabel\n    learningSnapshotText\n    leaveCommentText\n    levelLabel\n    loadingName\n    loginError\n    logoutText\n    mapAvailableText\n    masterText\n    moduleCompletedText\n    moduleCurrLockText\n    moduleRecommendedText\n    modulesCompletedText\n    modulesRecommendToText\n    modulesSelectedText\n    mostAwardedCatText\n    mostRecentEvaluationText\n    myAccountsTab\n    myBadgesLabel\n    myCOEsTab\n    myCompletedModulesText\n    myDevelopmentTab\n    myEarnedBadgesTab\n    myGroupLink\n    myLearnersLabel\n    myPerformanceText\n    myProfileText\n    myRecommendationsText\n    myRoleTab\n    myTeamDetailsText\n    myTeamStatistics\n    myTeamText\n    myTopLearnersText\n    nalxName\n    newLearnersText\n    nextText\n    noBadgesAwardedText\n    noBadgesAwardedYetText\n    noBadgesFoundText\n    noBlogsAvailText\n    noBrandFoundText\n    noBrandValuesText\n    nocategoriesText\n    noCommentText\n    noCompletedModulesText\n    noDataSelectedFilter\n    noDataSelectionText\n    noDocumentsAccText\n    noDocumentsCOEsText\n    noDocumentsConsumersText\n    noDocumentsLeadershipText\n    noDocumentsMyAccText\n    noDocumentsMyDevText\n    noDocumentsRoleText\n    noDocumentsSelfDevText\n    noDocumentsToolsText\n    noDocumentText\n    noDoorsFoundText\n    noEducationText\n    noEngageStoriesText\n    noExperiencesText\n    noFbGroupText\n    noFeaturedProductsText\n    noFeatureLabel\n    noFeedbackSuggestText\n    noHistoryFoundText\n    noImageAttachedText\n    noInfocusText\n    noLeadershipText\n    noLearnersFoundText\n    noLearnersText\n    noMapAvailableText\n    noModulesAvailableText\n    noModulesRecommendText\n    noModulesToRecommendText\n    noNewnessNotifiText\n    noofBadgesText\n    noRecentEvaluationText\n    noRegionsFoundText\n    noRelevantInfoText\n    noResourcesText\n    northAmericaLabel\n    noSeminarsRegionText\n    noSeminarsText\n    noSocialAccText\n    noSpGroupText\n    notAssessedText\n    noTeamMemberText\n    noText\n    notFormattedImage\n    notFoundPageText\n    notificationName\n    notificationsText\n    notifyEvaluationText\n    noTopLearnersText\n    noUpcomingSeminarsLabel\n    noUpcomingSeminarsText\n    noviceText\n    openModalText\n    outofText\n    overText\n    passwordLabel\n    performanceDashboardText\n    personInvitedLabel\n    placeText\n    pointsText\n    policyUnavailableText\n    privacyPolicyText\n    productName\n    proficiencyLevelLabel\n    profileBackgroundImageName\n    profileImageName\n    profileText\n    promotedText\n    promotionLevelMsg\n    promotionMsg\n    promotionText\n    promotionToLevelMsg\n    readMoreText\n    recentActivitiesLabel\n    recentEvaluationText\n    recommendedbyText\n    recommendModulesText\n    recommendText\n    regionsText\n    rememberMeLabel\n    resourcesInfoText\n    resourcesTab\n    resourceTab\n    reviewAvgScoreText\n    reviewName\n    salesResultText\n    searchName\n    searchResultsText\n    searchTermText\n    searchText\n    sectionText\n    selectBadgesMsg\n    selectBrandText\n    selectDoorText\n    selectOptionText\n    selectRegionText\n    selectSeminarText\n    selectText\n    selfDevelopmentTab\n    seminarsText\n    sendingRecommendText\n    sendText\n    sessionExpiredLabel\n    signInLabel\n    snapshotsPerformedText\n    snapshotsText\n    snapshotText\n    socialIconName\n    somethingWentWrongMsg\n    spanishLabel\n    statusErr\n    statusText\n    submitText\n    subText\n    subtitleText\n    successName\n    supportEmailLabel\n    techniqueServiceText\n    titleText\n    toolsTab\n    topBeautyAdvisorsText\n    topFieldExecutivesText\n    topLearnersName\n    topLearnersText\n    totalAvailableText\n    totalBadgesText\n    totalLearnersText\n    totalModulesCompletedText\n    totalSnapshotsText\n    troubleLabel\n    tryAgainText\n    unlockAdvLearningText\n    unlockAdvModuleMsg\n    upcomingSeminarsLabel\n    updateBirthdate\n    updateText\n    uploadPictureText\n    uploadProfilePicMsg\n    userName\n    verifyRecipientText\n    viewAllLabel\n    viewDetailsText\n    viewDocumentText\n    viewExistingDocumentText\n    viewSplashLabel\n    viewText\n    visitTalentBankText\n    visitText\n    whatNewText\n    writeCommentText\n    writeMsgText\n    yesText\n    notApplicableText\n    readyToLearnText\n    startToSoarText\n    pushingForExcellenceText\n    readyToTeachOthersText\n    ratingBeginingText\n    ratingEarlyText\n    ratingComfortableText\n    ratingReadyText\n    ratingGreatStartText\n    ratingExpertiseText\n    ratingConsistentText\n    ratingSavvyText\n    badgeAwardText\n    fiscalYearText\n    avgPerMonthText\n    mostAwardedText\n    leastAwardedText\n    questionText\n    sinceText\n    emailSentText\n    moreResultsText\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETSTATICLABEL</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">ccf43c1d-7057-43e6-84f2-826fea147b30</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591356058432</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;userDetails&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query userDetails($userId: String!) {\n  getUserDetail(userId: $userId) {\n    firstName\n    lastName\n    city\n    region\n    roles\n    userPicture\n    groups\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">USERDETAILS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">bbc9b2d6-9117-4e3e-885b-ede9a8f462db</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591356058448</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Notifications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNotifications&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query getNotifications($userId: String!) {\n  getNotifications(userId: $userId, page: 0, limit: 0) {\n    notificationsCount\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETNOTIFICATIONS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">2a891629-4761-49ac-92f5-4f432e5de0ce</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591356058459</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Brands" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;brandsQuery&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;,&quot;searchTerm&quot;:&quot;&quot;,&quot;page&quot;:0,&quot;limit&quot;:0},&quot;query&quot;:&quot;query brandsQuery($userId: String, $page: Int, $limit: Int, $searchTerm: String) {\n  brands: getBrandsForSearchTerm(userId: $userId, searchTerm: $searchTerm, page: $page, limit: $limit) {\n    brandId\n    title\n    description\n    brand\n    section\n    imageSmall\n    type\n    progress\n    duration\n    file\n    nid\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">BRANDSQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">7b48ee6b-3887-46d7-9a2b-93bc792d3483</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591356058487</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Search Brand" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Brand" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;brandsQuery&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;,&quot;searchTerm&quot;:&quot;clinique&quot;,&quot;page&quot;:0,&quot;limit&quot;:0},&quot;query&quot;:&quot;query brandsQuery($userId: String, $page: Int, $limit: Int, $searchTerm: String) {\n  brands: getBrandsForSearchTerm(userId: $userId, searchTerm: $searchTerm, page: $page, limit: $limit) {\n    brandId\n    title\n    description\n    brand\n    section\n    imageSmall\n    type\n    progress\n    duration\n    file\n    nid\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">7ad36bb1-8421-4998-940d-f85c0a18ea07</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591356351381</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Search - Classroom" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Classroom" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;modulesQuery&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;,&quot;searchTerm&quot;:&quot;clinique&quot;,&quot;page&quot;:0,&quot;limit&quot;:0},&quot;query&quot;:&quot;query modulesQuery($userId: String, $page: Int, $limit: Int, $searchTerm: String) {\n  modules: getModulesForSearchTerm(userId: $userId, searchTerm: $searchTerm, page: $page, limit: $limit) {\n    title\n    description\n    category\n    type\n    progress\n    duration\n    imageSmall\n    file\n    moduleId\n    level\n    contentType\n    levelId\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Search - Blogs" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Blogs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;blogsQuery&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;,&quot;searchTerm&quot;:&quot;confident&quot;,&quot;page&quot;:0,&quot;limit&quot;:0},&quot;query&quot;:&quot;query blogsQuery($userId: String, $page: Int, $limit: Int, $searchTerm: String) {\n  blogs: getBlogsForSearchTerm(userId: $userId, searchTerm: $searchTerm, page: $page, limit: $limit) {\n    blogId\n    title\n    description\n    commentDate\n    commentCount\n    imageSmall\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">BLOGSQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">300e8a71-4924-4f54-9367-9e8e6562eda9</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591357875589</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Search - Learners BA" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search BA" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;learnersQuery&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;,&quot;searchTerm&quot;:&quot;BA&quot;,&quot;page&quot;:0,&quot;limit&quot;:0,&quot;role&quot;:&quot;beauty_advisor&quot;},&quot;query&quot;:&quot;query learnersQuery($userId: String, $page: Int, $limit: Int, $searchTerm: String, $role: String) {\n  learners: getLearnerForSearchTerm(userId: $userId, page: $page, limit: $limit, searchTerm: $searchTerm, role: $role) {\n    memberId\n    brandId\n    userImage\n    firstName\n    lastName\n    role\n    brandNames\n    region\n    area\n    rank\n    dateOfJoining\n    updatedOn\n    proficiencyScore\n    doorId\n    doorName\n    regionId\n    snapshot\n    badgesPoints\n    badges {\n      userId\n      baId\n      count\n      badgeId\n      title\n      alternateImage\n      image\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">LEARNERSQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">3e84a9c6-a3fc-42b1-9000-fec85f7efe94</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591358091274</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Brand - Infocus" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>3.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Static Labels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStaticLabel&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getStaticLabel {\n  StaticLabels: getStaticLabels {\n    otherLabel\n    businessTab\n    policiesTab\n    cultureTab\n    noDocumentsBusinessText\n    noDocumentsPoliciesText\n    noDocumentsCultureText\n    newThisYearLabel\n    allLearnersLabel\n    allSnapshotLabel\n    allSeminarsLabel\n    upcomingLabel\n    completedLabel\n    noRecentActivityText\n    peopleInvitedLabel\n    aboutTab\n    accountsTab\n    additionalCommentsText\n    advancedLearningTab\n    advanceText\n    allBadgesTab\n    allBadgesText\n    allBrandsText\n    allDoorsText\n    allFbGroupLabel\n    allFeatureLabel\n    allLabel\n    allLeadershipText\n    allRegionsText\n    allSpGroupLabel\n    allTopLearnersText\n    anniversaryText\n    anotherErrText\n    archiveTab\n    attachDocumentText\n    attachNewDocMsg\n    avgMonthlyText\n    awardBadgesText\n    awardBadgeText\n    awardedByText\n    badgeAllocatedText\n    badgeAllocationText\n    badgeCategoryText\n    badgeName\n    badgePointsAwardedText\n    badgePtsText\n    badgesAllocationMsg\n    badgesAwardedText\n    badgesAwardedToLearnerText\n    badgesFoundText\n    badgesText\n    badgeText\n    basicLearningTab\n    basicTab\n    birthdayText\n    blogDetailText\n    blogsTab\n    brandErrMsg\n    brandFoundText\n    brandLinkName\n    brandListLabel\n    brandsLabel\n    brandTab\n    brandValuesTab\n    browserNotSupportVideo\n    buttonName\n    calendarName\n    cancelName\n    categoryForEvaluationText\n    categoryName\n    changeLangText\n    classroomTab\n    clearAllText\n    coachingRecommendText\n    coachText\n    comingSoonText\n    commentsText\n    confirmText\n    congratulationsText\n    consumersTab\n    continueText\n    courseLockedText\n    dashboardFeaturedLabel\n    daysLeftText\n    deleteCommentMsg\n    deleteText\n    detailedViewText\n    doneText\n    editText\n    educationInfoText\n    educationName\n    educationTab\n    elcBrandName\n    emailBodyEmptyText\n    emailLabel\n    emailName\n    emailText\n    emptyTemplateMsg\n    englishLabel\n    enterValidEmailText\n    errMsgLanguage\n    errorTemplateMsg\n    errorText\n    errPostedCommentMsg\n    establishedPerformerText\n    evaluateError\n    evaluateName\n    evaluationText\n    evaluatorText\n    exitEvaluationText\n    experiencesAvailText\n    experiencesTab\n    facebookGroupsText\n    featuredProductsAvalText\n    featuredProductsTab\n    featuredProductText\n    featuredText\n    fieldExecutiveText\n    filterText\n    frenchLabel\n    goalManagementText\n    goBackText\n    gotoHomeText\n    historyFoundText\n    historyText\n    hiText\n    influenceText\n    infoBrandValuesText\n    infocusAvailableText\n    infocusName\n    inFocusTab\n    intermediateText\n    interPerformerText\n    itemName\n    joinedOnText\n    knowledgeText\n    leaderboardText\n    leadershipTab\n    learnerBrandDistribText\n    learnerPhotoName\n    learnerProficiencyDistribText\n    learnersBATab\n    learnersFETab\n    learnersFoundText\n    learnersNameText\n    learnersSelectedText\n    learnersText\n    learnerText\n    learningExperienceLabel\n    learningSnapshotText\n    leaveCommentText\n    levelLabel\n    loadingName\n    loginError\n    logoutText\n    mapAvailableText\n    masterText\n    moduleCompletedText\n    moduleCurrLockText\n    moduleRecommendedText\n    modulesCompletedText\n    modulesRecommendToText\n    modulesSelectedText\n    mostAwardedCatText\n    mostRecentEvaluationText\n    myAccountsTab\n    myBadgesLabel\n    myCOEsTab\n    myCompletedModulesText\n    myDevelopmentTab\n    myEarnedBadgesTab\n    myGroupLink\n    myLearnersLabel\n    myPerformanceText\n    myProfileText\n    myRecommendationsText\n    myRoleTab\n    myTeamDetailsText\n    myTeamStatistics\n    myTeamText\n    myTopLearnersText\n    nalxName\n    newLearnersText\n    nextText\n    noBadgesAwardedText\n    noBadgesAwardedYetText\n    noBadgesFoundText\n    noBlogsAvailText\n    noBrandFoundText\n    noBrandValuesText\n    nocategoriesText\n    noCommentText\n    noCompletedModulesText\n    noDataSelectedFilter\n    noDataSelectionText\n    noDocumentsAccText\n    noDocumentsCOEsText\n    noDocumentsConsumersText\n    noDocumentsLeadershipText\n    noDocumentsMyAccText\n    noDocumentsMyDevText\n    noDocumentsRoleText\n    noDocumentsSelfDevText\n    noDocumentsToolsText\n    noDocumentText\n    noDoorsFoundText\n    noEducationText\n    noEngageStoriesText\n    noExperiencesText\n    noFbGroupText\n    noFeaturedProductsText\n    noFeatureLabel\n    noFeedbackSuggestText\n    noHistoryFoundText\n    noImageAttachedText\n    noInfocusText\n    noLeadershipText\n    noLearnersFoundText\n    noLearnersText\n    noMapAvailableText\n    noModulesAvailableText\n    noModulesRecommendText\n    noModulesToRecommendText\n    noNewnessNotifiText\n    noofBadgesText\n    noRecentEvaluationText\n    noRegionsFoundText\n    noRelevantInfoText\n    noResourcesText\n    northAmericaLabel\n    noSeminarsRegionText\n    noSeminarsText\n    noSocialAccText\n    noSpGroupText\n    notAssessedText\n    noTeamMemberText\n    noText\n    notFormattedImage\n    notFoundPageText\n    notificationName\n    notificationsText\n    notifyEvaluationText\n    noTopLearnersText\n    noUpcomingSeminarsLabel\n    noUpcomingSeminarsText\n    noviceText\n    openModalText\n    outofText\n    overText\n    passwordLabel\n    performanceDashboardText\n    personInvitedLabel\n    placeText\n    pointsText\n    policyUnavailableText\n    privacyPolicyText\n    productName\n    proficiencyLevelLabel\n    profileBackgroundImageName\n    profileImageName\n    profileText\n    promotedText\n    promotionLevelMsg\n    promotionMsg\n    promotionText\n    promotionToLevelMsg\n    readMoreText\n    recentActivitiesLabel\n    recentEvaluationText\n    recommendedbyText\n    recommendModulesText\n    recommendText\n    regionsText\n    rememberMeLabel\n    resourcesInfoText\n    resourcesTab\n    resourceTab\n    reviewAvgScoreText\n    reviewName\n    salesResultText\n    searchName\n    searchResultsText\n    searchTermText\n    searchText\n    sectionText\n    selectBadgesMsg\n    selectBrandText\n    selectDoorText\n    selectOptionText\n    selectRegionText\n    selectSeminarText\n    selectText\n    selfDevelopmentTab\n    seminarsText\n    sendingRecommendText\n    sendText\n    sessionExpiredLabel\n    signInLabel\n    snapshotsPerformedText\n    snapshotsText\n    snapshotText\n    socialIconName\n    somethingWentWrongMsg\n    spanishLabel\n    statusErr\n    statusText\n    submitText\n    subText\n    subtitleText\n    successName\n    supportEmailLabel\n    techniqueServiceText\n    titleText\n    toolsTab\n    topBeautyAdvisorsText\n    topFieldExecutivesText\n    topLearnersName\n    topLearnersText\n    totalAvailableText\n    totalBadgesText\n    totalLearnersText\n    totalModulesCompletedText\n    totalSnapshotsText\n    troubleLabel\n    tryAgainText\n    unlockAdvLearningText\n    unlockAdvModuleMsg\n    upcomingSeminarsLabel\n    updateBirthdate\n    updateText\n    uploadPictureText\n    uploadProfilePicMsg\n    userName\n    verifyRecipientText\n    viewAllLabel\n    viewDetailsText\n    viewDocumentText\n    viewExistingDocumentText\n    viewSplashLabel\n    viewText\n    visitTalentBankText\n    visitText\n    whatNewText\n    writeCommentText\n    writeMsgText\n    yesText\n    notApplicableText\n    readyToLearnText\n    startToSoarText\n    pushingForExcellenceText\n    readyToTeachOthersText\n    ratingBeginingText\n    ratingEarlyText\n    ratingComfortableText\n    ratingReadyText\n    ratingGreatStartText\n    ratingExpertiseText\n    ratingConsistentText\n    ratingSavvyText\n    badgeAwardText\n    fiscalYearText\n    avgPerMonthText\n    mostAwardedText\n    leastAwardedText\n    questionText\n    sinceText\n    emailSentText\n    moreResultsText\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETSTATICLABEL</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">e88d3266-13f6-45d4-90e6-2ce48a5cff66</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591359114933</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;userDetails&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query userDetails($userId: String!) {\n  getUserDetail(userId: $userId) {\n    firstName\n    lastName\n    city\n    region\n    roles\n    userPicture\n    groups\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">USERDETAILS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">4c76eecb-141d-4582-85b5-ab828e80f016</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591359114944</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Notifications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNotifications&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query getNotifications($userId: String!) {\n  getNotifications(userId: $userId, page: 0, limit: 0) {\n    notificationsCount\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETNOTIFICATIONS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">a1d4840a-293f-47ad-8c75-6c9c7b60b245</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591359114948</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Brand About" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;brandAbout&quot;,&quot;variables&quot;:{&quot;nid&quot;:&quot;${BrandId}&quot;,&quot;tab&quot;:&quot;infocus&quot;},&quot;query&quot;:&quot;query brandAbout($nid: String!) {\n  brandAbout: getBrandAbout(nid: $nid) {\n    nid\n    title\n    fieldHeroImage\n    fieldBrandUrl\n    fieldBrandUrlDescription\n    fieldBrandAbout\n    fieldBrandQuote\n    fieldBrandAuthor\n    fieldBrandAuthorDesignation\n    fieldBrandImage\n    fieldBrandStat2\n    fieldBrandStat2Info\n    fieldBrandStat3\n    fieldBrandStat3Info\n    brandPdf {\n      pdfUrl\n      pdfTitle\n      __typename\n    }\n    fieldBrandStat1\n    fieldBrandStat1Info\n    isElc\n    __typename\n  }\n  brandStats: getBrandStats(nid: $nid) {\n    rank\n    stores\n    learners\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">BRANDABOUT</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">1e735a12-b075-4635-b4d6-db3004e3d59f</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591359114959</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Brand Logo" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getBrandLogo&quot;,&quot;variables&quot;:{&quot;brandId&quot;:&quot;${BrandId}&quot;},&quot;query&quot;:&quot;query getBrandLogo($brandId: String!) {\n  BrandLogo: getBrandLogo(brandId: $brandId) {\n    fieldBrandLogo\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETBRANDLOGO</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">d2c7d235-2272-44bc-a56a-cb786d7c7746</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591359117633</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Social Links" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getSocialLinks&quot;,&quot;variables&quot;:{&quot;nid&quot;:&quot;${BrandId}&quot;},&quot;query&quot;:&quot;query getSocialLinks($nid: String!) {\n  socialLinksData: getBrandSocial(nid: $nid) {\n    title\n    link\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETSOCIALLINKS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">d92bc18d-d476-43e5-ac11-18b963d636f9</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591359117635</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Brand Infocus" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;brandInfocus&quot;,&quot;variables&quot;:{&quot;nid&quot;:&quot;${BrandId&quot;},&quot;query&quot;:&quot;query brandInfocus($nid: String!) {\n  brandInfocus: getBrandInFocus(nid: $nid) {\n    nid\n    title\n    inFocusImage\n    inFocusDescription\n    readMore\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">BRANDINFOCUS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">f72c7dbb-d650-45ab-b35f-2aab27d0059a</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591359117639</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Infocus Detail" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>2.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Static Labels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStaticLabel&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getStaticLabel {\n  StaticLabels: getStaticLabels {\n    otherLabel\n    businessTab\n    policiesTab\n    cultureTab\n    noDocumentsBusinessText\n    noDocumentsPoliciesText\n    noDocumentsCultureText\n    newThisYearLabel\n    allLearnersLabel\n    allSnapshotLabel\n    allSeminarsLabel\n    upcomingLabel\n    completedLabel\n    noRecentActivityText\n    peopleInvitedLabel\n    aboutTab\n    accountsTab\n    additionalCommentsText\n    advancedLearningTab\n    advanceText\n    allBadgesTab\n    allBadgesText\n    allBrandsText\n    allDoorsText\n    allFbGroupLabel\n    allFeatureLabel\n    allLabel\n    allLeadershipText\n    allRegionsText\n    allSpGroupLabel\n    allTopLearnersText\n    anniversaryText\n    anotherErrText\n    archiveTab\n    attachDocumentText\n    attachNewDocMsg\n    avgMonthlyText\n    awardBadgesText\n    awardBadgeText\n    awardedByText\n    badgeAllocatedText\n    badgeAllocationText\n    badgeCategoryText\n    badgeName\n    badgePointsAwardedText\n    badgePtsText\n    badgesAllocationMsg\n    badgesAwardedText\n    badgesAwardedToLearnerText\n    badgesFoundText\n    badgesText\n    badgeText\n    basicLearningTab\n    basicTab\n    birthdayText\n    blogDetailText\n    blogsTab\n    brandErrMsg\n    brandFoundText\n    brandLinkName\n    brandListLabel\n    brandsLabel\n    brandTab\n    brandValuesTab\n    browserNotSupportVideo\n    buttonName\n    calendarName\n    cancelName\n    categoryForEvaluationText\n    categoryName\n    changeLangText\n    classroomTab\n    clearAllText\n    coachingRecommendText\n    coachText\n    comingSoonText\n    commentsText\n    confirmText\n    congratulationsText\n    consumersTab\n    continueText\n    courseLockedText\n    dashboardFeaturedLabel\n    daysLeftText\n    deleteCommentMsg\n    deleteText\n    detailedViewText\n    doneText\n    editText\n    educationInfoText\n    educationName\n    educationTab\n    elcBrandName\n    emailBodyEmptyText\n    emailLabel\n    emailName\n    emailText\n    emptyTemplateMsg\n    englishLabel\n    enterValidEmailText\n    errMsgLanguage\n    errorTemplateMsg\n    errorText\n    errPostedCommentMsg\n    establishedPerformerText\n    evaluateError\n    evaluateName\n    evaluationText\n    evaluatorText\n    exitEvaluationText\n    experiencesAvailText\n    experiencesTab\n    facebookGroupsText\n    featuredProductsAvalText\n    featuredProductsTab\n    featuredProductText\n    featuredText\n    fieldExecutiveText\n    filterText\n    frenchLabel\n    goalManagementText\n    goBackText\n    gotoHomeText\n    historyFoundText\n    historyText\n    hiText\n    influenceText\n    infoBrandValuesText\n    infocusAvailableText\n    infocusName\n    inFocusTab\n    intermediateText\n    interPerformerText\n    itemName\n    joinedOnText\n    knowledgeText\n    leaderboardText\n    leadershipTab\n    learnerBrandDistribText\n    learnerPhotoName\n    learnerProficiencyDistribText\n    learnersBATab\n    learnersFETab\n    learnersFoundText\n    learnersNameText\n    learnersSelectedText\n    learnersText\n    learnerText\n    learningExperienceLabel\n    learningSnapshotText\n    leaveCommentText\n    levelLabel\n    loadingName\n    loginError\n    logoutText\n    mapAvailableText\n    masterText\n    moduleCompletedText\n    moduleCurrLockText\n    moduleRecommendedText\n    modulesCompletedText\n    modulesRecommendToText\n    modulesSelectedText\n    mostAwardedCatText\n    mostRecentEvaluationText\n    myAccountsTab\n    myBadgesLabel\n    myCOEsTab\n    myCompletedModulesText\n    myDevelopmentTab\n    myEarnedBadgesTab\n    myGroupLink\n    myLearnersLabel\n    myPerformanceText\n    myProfileText\n    myRecommendationsText\n    myRoleTab\n    myTeamDetailsText\n    myTeamStatistics\n    myTeamText\n    myTopLearnersText\n    nalxName\n    newLearnersText\n    nextText\n    noBadgesAwardedText\n    noBadgesAwardedYetText\n    noBadgesFoundText\n    noBlogsAvailText\n    noBrandFoundText\n    noBrandValuesText\n    nocategoriesText\n    noCommentText\n    noCompletedModulesText\n    noDataSelectedFilter\n    noDataSelectionText\n    noDocumentsAccText\n    noDocumentsCOEsText\n    noDocumentsConsumersText\n    noDocumentsLeadershipText\n    noDocumentsMyAccText\n    noDocumentsMyDevText\n    noDocumentsRoleText\n    noDocumentsSelfDevText\n    noDocumentsToolsText\n    noDocumentText\n    noDoorsFoundText\n    noEducationText\n    noEngageStoriesText\n    noExperiencesText\n    noFbGroupText\n    noFeaturedProductsText\n    noFeatureLabel\n    noFeedbackSuggestText\n    noHistoryFoundText\n    noImageAttachedText\n    noInfocusText\n    noLeadershipText\n    noLearnersFoundText\n    noLearnersText\n    noMapAvailableText\n    noModulesAvailableText\n    noModulesRecommendText\n    noModulesToRecommendText\n    noNewnessNotifiText\n    noofBadgesText\n    noRecentEvaluationText\n    noRegionsFoundText\n    noRelevantInfoText\n    noResourcesText\n    northAmericaLabel\n    noSeminarsRegionText\n    noSeminarsText\n    noSocialAccText\n    noSpGroupText\n    notAssessedText\n    noTeamMemberText\n    noText\n    notFormattedImage\n    notFoundPageText\n    notificationName\n    notificationsText\n    notifyEvaluationText\n    noTopLearnersText\n    noUpcomingSeminarsLabel\n    noUpcomingSeminarsText\n    noviceText\n    openModalText\n    outofText\n    overText\n    passwordLabel\n    performanceDashboardText\n    personInvitedLabel\n    placeText\n    pointsText\n    policyUnavailableText\n    privacyPolicyText\n    productName\n    proficiencyLevelLabel\n    profileBackgroundImageName\n    profileImageName\n    profileText\n    promotedText\n    promotionLevelMsg\n    promotionMsg\n    promotionText\n    promotionToLevelMsg\n    readMoreText\n    recentActivitiesLabel\n    recentEvaluationText\n    recommendedbyText\n    recommendModulesText\n    recommendText\n    regionsText\n    rememberMeLabel\n    resourcesInfoText\n    resourcesTab\n    resourceTab\n    reviewAvgScoreText\n    reviewName\n    salesResultText\n    searchName\n    searchResultsText\n    searchTermText\n    searchText\n    sectionText\n    selectBadgesMsg\n    selectBrandText\n    selectDoorText\n    selectOptionText\n    selectRegionText\n    selectSeminarText\n    selectText\n    selfDevelopmentTab\n    seminarsText\n    sendingRecommendText\n    sendText\n    sessionExpiredLabel\n    signInLabel\n    snapshotsPerformedText\n    snapshotsText\n    snapshotText\n    socialIconName\n    somethingWentWrongMsg\n    spanishLabel\n    statusErr\n    statusText\n    submitText\n    subText\n    subtitleText\n    successName\n    supportEmailLabel\n    techniqueServiceText\n    titleText\n    toolsTab\n    topBeautyAdvisorsText\n    topFieldExecutivesText\n    topLearnersName\n    topLearnersText\n    totalAvailableText\n    totalBadgesText\n    totalLearnersText\n    totalModulesCompletedText\n    totalSnapshotsText\n    troubleLabel\n    tryAgainText\n    unlockAdvLearningText\n    unlockAdvModuleMsg\n    upcomingSeminarsLabel\n    updateBirthdate\n    updateText\n    uploadPictureText\n    uploadProfilePicMsg\n    userName\n    verifyRecipientText\n    viewAllLabel\n    viewDetailsText\n    viewDocumentText\n    viewExistingDocumentText\n    viewSplashLabel\n    viewText\n    visitTalentBankText\n    visitText\n    whatNewText\n    writeCommentText\n    writeMsgText\n    yesText\n    notApplicableText\n    readyToLearnText\n    startToSoarText\n    pushingForExcellenceText\n    readyToTeachOthersText\n    ratingBeginingText\n    ratingEarlyText\n    ratingComfortableText\n    ratingReadyText\n    ratingGreatStartText\n    ratingExpertiseText\n    ratingConsistentText\n    ratingSavvyText\n    badgeAwardText\n    fiscalYearText\n    avgPerMonthText\n    mostAwardedText\n    leastAwardedText\n    questionText\n    sinceText\n    emailSentText\n    moreResultsText\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETSTATICLABEL</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">5e5c96e5-8f65-44b6-b346-439cfcbb93d4</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591359441611</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;userDetails&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;215136&quot;},&quot;query&quot;:&quot;query userDetails($userId: String!) {\n  getUserDetail(userId: $userId) {\n    firstName\n    lastName\n    city\n    region\n    roles\n    userPicture\n    groups\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">USERDETAILS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">9910479c-0708-48e7-b6a5-d9625462e493</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591359441616</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Notifications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNotifications&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query getNotifications($userId: String!) {\n  getNotifications(userId: $userId, page: 0, limit: 0) {\n    notificationsCount\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETNOTIFICATIONS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">fed36d2d-5cd4-4f16-bdff-de01d3e51275</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591359441631</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Brand Infocus Module Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;brandInfocusModuleListing&quot;,&quot;variables&quot;:{&quot;brandId&quot;:&quot;${BrandId}&quot;,&quot;infocusId&quot;:&quot;${InfocusId}&quot;},&quot;query&quot;:&quot;query brandInfocusModuleListing($brandId: String!, $infocusId: String!) {\n  brandInfocus: getBrandInFocus(nid: $brandId) {\n    nid\n    moduleTitle: title\n    moduleImage: inFocusImage\n    moduleDescription: inFocusDescription\n    readMore\n    __typename\n  }\n  brandInfocusModules: getInfocusModules(infocusId: $infocusId) {\n    nid\n    title\n    image: inFocusModuleImage\n    description: inFocusModuleDescription\n    file: inFocusModuleDocument\n    type: inFocusModuleType\n    inFocusFileType\n    inFocusLink\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">BRANDINFOCUSMODULELISTING</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">f537bc4a-bdaa-4239-b84d-aa18bfa214b7</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591359441662</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Brand - Trending" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Trending Filters" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;trendingFilters&quot;,&quot;variables&quot;:{&quot;brandId&quot;:&quot;${BrandId}&quot;,&quot;marketName&quot;:&quot;US&quot;},&quot;query&quot;:&quot;query trendingFilters($brandId: Int, $marketName: String) {\n  trendingFilters: getTrendingFilters(brandId: $brandId, marketName: $marketName) {\n    id\n    name\n    key\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">TRENDINGFILTERS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">fe5efa46-89b2-45b4-be88-2c983a4c73ee</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601533488741</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Trending List" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;trendingMedia&quot;,&quot;variables&quot;:{&quot;brandId&quot;:${BrandId},&quot;marketName&quot;:&quot;US&quot;,&quot;categoryId&quot;:&quot;&quot;,&quot;count&quot;:20,&quot;pageNumber&quot;:1},&quot;query&quot;:&quot;query trendingMedia($brandId: Int, $marketName: String, $count: Int, $pageNumber: Int, $categoryId: String) {\n  trendingMedia: getTrendingMedia(brandId: $brandId, marketName: $marketName, count: $count, pageNumber: $pageNumber, categoryId: $categoryId) {\n    id\n    videoUrl\n    images {\n      thumbnail\n      square\n      mobile\n      normal\n      original\n      __typename\n    }\n    type\n    caption\n    original_source\n    avatar_url\n    medianame\n    username\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">TRENDINGMEDIA</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">47db1d0f-8784-4f54-9806-e32b4d4ed2fd</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601533488746</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Brand- Featured Products" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Brand Feature Products" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;brandFeatureProducts&quot;,&quot;variables&quot;:{&quot;nid&quot;:&quot;${BrandId}&quot;},&quot;query&quot;:&quot;query brandFeatureProducts($nid: String!) {\n  brandFeatureProducts: getBrandFeature(nid: $nid) {\n    category\n    categoryId\n    data: data {\n      nid\n      title\n      fieldDescription\n      fieldDocument\n      fieldFeaturedProductImage\n      featuredProductModuleType\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Brand -Experiences" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Brand Experience" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;brandExperience&quot;,&quot;variables&quot;:{&quot;nid&quot;:&quot;${BrandId}&quot;},&quot;query&quot;:&quot;query brandExperience($nid: String!) {\n  brandExperience: getBrandExperience(nid: $nid) {\n    category\n    categoryId\n    data: data {\n      nid\n      title\n      fieldDescription\n      fieldDocument\n      fieldExperienceImage\n      experienceModuleType\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Brand - Brand Values" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Brand Values" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;brandValue&quot;,&quot;variables&quot;:{&quot;nid&quot;:&quot;${BrandId}&quot;},&quot;query&quot;:&quot;query brandValue($nid: String!) {\n  brandValue: getBrandValue(nid: $nid) {\n    category\n    categoryId\n    data: data {\n      nid\n      title\n      fieldDescription\n      fieldDocument\n      fieldValueImage\n      brandValueModuleType\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Brand - Education" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
              </elementProp>
              <elementProp name="X-START-TIME" elementType="Header">
                <stringProp name="Header.name">X-START-TIME</stringProp>
                <stringProp name="Header.value">1591176667972</stringProp>
              </elementProp>
              <elementProp name="X-USER-LANG" elementType="Header">
                <stringProp name="Header.name">X-USER-LANG</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.80 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                <stringProp name="Header.value">993ea1e5-1421-46e4-be99-14a5fb8b0341</stringProp>
              </elementProp>
              <elementProp name="X-AUTH-TOKEN" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${access_key}</stringProp>
              </elementProp>
              <elementProp name="X-TRACE-OPERATION" elementType="Header">
                <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                <stringProp name="Header.value">BRANDEDUCATION</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="X-TRACE-USER" elementType="Header">
                <stringProp name="Header.name">X-TRACE-USER</stringProp>
                <stringProp name="Header.value">eb57d54360b9422e5ebbc7e7a8ab1c95bcc5ce300c76d1358620c1d0fc0958af</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Brand Education" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;brandEducation&quot;,&quot;variables&quot;:{&quot;nid&quot;:&quot;${BrandId}&quot;},&quot;query&quot;:&quot;query brandEducation($nid: String!) {\n  brandEducation: getBrandEducation(nid: $nid) {\n    category\n    categoryId\n    data: data {\n      nid\n      title\n      fieldDescription\n      fieldDocument\n      fieldEducationImage\n      fieldEducationContent\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Brand Leadership" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://uat-nalx.elcompanies.com</stringProp>
              </elementProp>
              <elementProp name="X-START-TIME" elementType="Header">
                <stringProp name="Header.name">X-START-TIME</stringProp>
                <stringProp name="Header.value">1591177038765</stringProp>
              </elementProp>
              <elementProp name="X-USER-LANG" elementType="Header">
                <stringProp name="Header.name">X-USER-LANG</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.80 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                <stringProp name="Header.value">73fb55e6-e8f8-4a8c-a241-a51e368d1c31</stringProp>
              </elementProp>
              <elementProp name="X-AUTH-TOKEN" elementType="Header">
                <stringProp name="Header.name">X-AUTH-TOKEN</stringProp>
                <stringProp name="Header.value">${access_key}</stringProp>
              </elementProp>
              <elementProp name="X-TRACE-OPERATION" elementType="Header">
                <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                <stringProp name="Header.value">BRANDLEADERSHIP</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="X-TRACE-USER" elementType="Header">
                <stringProp name="Header.name">X-TRACE-USER</stringProp>
                <stringProp name="Header.value">eb57d54360b9422e5ebbc7e7a8ab1c95bcc5ce300c76d1358620c1d0fc0958af</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Brand Leadership" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;brandLeadership&quot;,&quot;variables&quot;:{&quot;nid&quot;:&quot;${BrandId}&quot;},&quot;query&quot;:&quot;query brandLeadership($nid: String!) {\n  brandLeadership: getBrandLeadership(nid: $nid) {\n    category\n    categoryId\n    data: data {\n      nid\n      title\n      fieldDescription\n      fieldDocument\n      fieldLeadershipImage\n      leadershipModuleType\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Consumer - Learning Path" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Learning Path Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;leaningPathModuleQuery&quot;,&quot;variables&quot;:{&quot;levelId&quot;:${Consumer_LevelId},&quot;learningPathId&quot;:0},&quot;query&quot;:&quot;query leaningPathModuleQuery($levelId: Int, $learningPathId: Int) {\n  learningPath: getLearningPath(levelId: $levelId, learningPathId: $learningPathId) {\n    learningPathTitle\n    learningPathDescription\n    learningPathTotalDuration\n    learningPathprogress\n    learningPathTotalPoints\n    learningPathImageLarge\n    learningPathImageSmall\n    favourites\n    bookmarks\n    userFavouriteStatus\n    userBookmarkStatus\n    modulesListing {\n      title\n      description\n      moduleType\n      progress\n      duration\n      image\n      file\n      nid\n      section\n      levelTitle\n      levelId\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Consumer - Resource" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Consumer - Resource" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;consumersModuleQuery&quot;,&quot;variables&quot;:{&quot;nid&quot;:${Consumer_LevelId},&quot;type&quot;:&quot;resource&quot;},&quot;query&quot;:&quot;query consumersModuleQuery($nid: String, $type: String) {\n  consumersModuleQuery: getEduMyRoleModule(nid: $nid, type: $type) {\n    info: info {\n      moduleTitle\n      moduleImage\n      moduleDescription\n      points\n      __typename\n    }\n    filter {\n      value: key\n      label: value\n      __typename\n    }\n    sort {\n      value: key\n      label: value\n      __typename\n    }\n    modules: result {\n      nid\n      title\n      description\n      image\n      file\n      progress\n      category\n      type\n      duration\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      recommended\n      likes\n      createdOn\n      moduleClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Tools - Learning Path" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tools Module" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;toolsModuleQuery&quot;,&quot;variables&quot;:{&quot;nid&quot;:&quot;${ToolsId}&quot;,&quot;type&quot;:&quot;modules&quot;},&quot;query&quot;:&quot;query toolsModuleQuery($nid: String, $type: String) {\n  toolsModuleQuery: getEduMyCoeModule(nid: $nid, type: $type) {\n    info: info {\n      moduleTitle\n      moduleImage\n      moduleDescription\n      points\n      __typename\n    }\n    filter {\n      value: key\n      label: value\n      __typename\n    }\n    sort {\n      value: key\n      label: value\n      __typename\n    }\n    modules: result {\n      nid\n      title\n      description\n      image\n      file\n      progress\n      category\n      type\n      duration\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      recommended\n      likes\n      createdOn\n      moduleClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">TOOLSMODULEQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">2743e2b8-64ec-4dd0-b57e-25801f6c328a</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601534825969</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tools Learning Path" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;leaningPathModuleQuery&quot;,&quot;variables&quot;:{&quot;levelId&quot;:${ToolsId},&quot;learningPathId&quot;:0},&quot;query&quot;:&quot;query leaningPathModuleQuery($levelId: Int, $learningPathId: Int) {\n  learningPath: getLearningPath(levelId: $levelId, learningPathId: $learningPathId) {\n    learningPathTitle\n    learningPathDescription\n    learningPathTotalDuration\n    learningPathprogress\n    learningPathTotalPoints\n    learningPathImageLarge\n    learningPathImageSmall\n    favourites\n    bookmarks\n    userFavouriteStatus\n    userBookmarkStatus\n    modulesListing {\n      title\n      description\n      moduleType\n      progress\n      duration\n      image\n      file\n      nid\n      section\n      levelTitle\n      levelId\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">LEANINGPATHMODULEQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">dc1763c6-6e94-40b8-81cf-8921f39f5a89</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601534829126</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Tools - Resource" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tools Modules" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;toolsModuleQuery&quot;,&quot;variables&quot;:{&quot;nid&quot;:${ToolsId},&quot;type&quot;:&quot;resource&quot;},&quot;query&quot;:&quot;query toolsModuleQuery($nid: String, $type: String) {\n  toolsModuleQuery: getEduMyCoeModule(nid: $nid, type: $type) {\n    info: info {\n      moduleTitle\n      moduleImage\n      moduleDescription\n      points\n      __typename\n    }\n    filter {\n      value: key\n      label: value\n      __typename\n    }\n    sort {\n      value: key\n      label: value\n      __typename\n    }\n    modules: result {\n      nid\n      title\n      description\n      image\n      file\n      progress\n      category\n      type\n      duration\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      recommended\n      likes\n      createdOn\n      moduleClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Business - Learning Path" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Business Module" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;businessModuleQuery&quot;,&quot;variables&quot;:{&quot;nid&quot;:&quot;${BusinessId}&quot;,&quot;type&quot;:&quot;modules&quot;},&quot;query&quot;:&quot;query businessModuleQuery($nid: String, $type: String) {\n  businessModuleQuery: getEduMyBusinessModule(nid: $nid, type: $type) {\n    info: info {\n      moduleTitle\n      moduleImage\n      moduleDescription\n      points\n      __typename\n    }\n    filter {\n      value: key\n      label: value\n      __typename\n    }\n    sort {\n      value: key\n      label: value\n      __typename\n    }\n    modules: result {\n      title\n      description\n      image\n      file\n      progress\n      category\n      type\n      duration\n      nid\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      recommended\n      likes\n      createdOn\n      moduleClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">BUSINESSMODULEQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">1b94c6f8-8daa-41e3-bb5c-c94056dee1e1</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601535400678</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Business Learning Path" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;leaningPathModuleQuery&quot;,&quot;variables&quot;:{&quot;levelId&quot;:${BusinessId},&quot;learningPathId&quot;:0},&quot;query&quot;:&quot;query leaningPathModuleQuery($levelId: Int, $learningPathId: Int) {\n  learningPath: getLearningPath(levelId: $levelId, learningPathId: $learningPathId) {\n    learningPathTitle\n    learningPathDescription\n    learningPathTotalDuration\n    learningPathprogress\n    learningPathTotalPoints\n    learningPathImageLarge\n    learningPathImageSmall\n    favourites\n    bookmarks\n    userFavouriteStatus\n    userBookmarkStatus\n    modulesListing {\n      title\n      description\n      moduleType\n      progress\n      duration\n      image\n      file\n      nid\n      section\n      levelTitle\n      levelId\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">LEANINGPATHMODULEQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">ca5c6697-68ca-41f4-932a-4382b5a4dead</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601535402911</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Business - Resource" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Business Resource" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;businessModuleQuery&quot;,&quot;variables&quot;:{&quot;nid&quot;:${BusinessId},&quot;type&quot;:&quot;resource&quot;},&quot;query&quot;:&quot;query businessModuleQuery($nid: String, $type: String) {\n  businessModuleQuery: getEduMyBusinessModule(nid: $nid, type: $type) {\n    info: info {\n      moduleTitle\n      moduleImage\n      moduleDescription\n      points\n      __typename\n    }\n    filter {\n      value: key\n      label: value\n      __typename\n    }\n    sort {\n      value: key\n      label: value\n      __typename\n    }\n    modules: result {\n      title\n      description\n      image\n      file\n      progress\n      category\n      type\n      duration\n      nid\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      recommended\n      likes\n      createdOn\n      moduleClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Accounts Learning Path" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Accounts Module" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;accountModuleQuery&quot;,&quot;variables&quot;:{&quot;nid&quot;:&quot;${AccountsId}&quot;,&quot;type&quot;:&quot;modules&quot;},&quot;query&quot;:&quot;query accountModuleQuery($nid: String, $type: String) {\n  accountModuleQuery: getEduMyAccountModule(nid: $nid, type: $type) {\n    info: info {\n      moduleTitle\n      moduleImage\n      moduleDescription\n      points\n      __typename\n    }\n    filter {\n      value: key\n      label: value\n      __typename\n    }\n    sort {\n      value: key\n      label: value\n      __typename\n    }\n    modules: result {\n      title\n      description\n      image\n      file\n      progress\n      category\n      type\n      duration\n      nid\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      recommended\n      likes\n      createdOn\n      moduleClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">ACCOUNTMODULEQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">a036ee89-52ec-4a22-a2ec-0ffaa664f00c</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601536019408</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Accounts Learning Path" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;leaningPathModuleQuery&quot;,&quot;variables&quot;:{&quot;levelId&quot;:${AccountsId},&quot;learningPathId&quot;:0},&quot;query&quot;:&quot;query leaningPathModuleQuery($levelId: Int, $learningPathId: Int) {\n  learningPath: getLearningPath(levelId: $levelId, learningPathId: $learningPathId) {\n    learningPathTitle\n    learningPathDescription\n    learningPathTotalDuration\n    learningPathprogress\n    learningPathTotalPoints\n    learningPathImageLarge\n    learningPathImageSmall\n    favourites\n    bookmarks\n    userFavouriteStatus\n    userBookmarkStatus\n    modulesListing {\n      title\n      description\n      moduleType\n      progress\n      duration\n      image\n      file\n      nid\n      section\n      levelTitle\n      levelId\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">LEANINGPATHMODULEQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">f5924590-2cdf-49f1-8f5f-8c080f8e05ed</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601536021768</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Accounts Resource" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Module Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;accountModuleQuery&quot;,&quot;variables&quot;:{&quot;nid&quot;:${AccountsId},&quot;type&quot;:&quot;resource&quot;},&quot;query&quot;:&quot;query accountModuleQuery($nid: String, $type: String) {\n  accountModuleQuery: getEduMyAccountModule(nid: $nid, type: $type) {\n    info: info {\n      moduleTitle\n      moduleImage\n      moduleDescription\n      points\n      __typename\n    }\n    filter {\n      value: key\n      label: value\n      __typename\n    }\n    sort {\n      value: key\n      label: value\n      __typename\n    }\n    modules: result {\n      title\n      description\n      image\n      file\n      progress\n      category\n      type\n      duration\n      nid\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      recommended\n      likes\n      createdOn\n      moduleClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Policies Learning Path" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Module Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;policiesModuleQuery&quot;,&quot;variables&quot;:{&quot;nid&quot;:&quot;${PoliciesId}&quot;,&quot;type&quot;:&quot;modules&quot;},&quot;query&quot;:&quot;query policiesModuleQuery($nid: String, $type: String) {\n  policiesModuleQuery: getEduMyPoliciesModule(nid: $nid, type: $type) {\n    info: info {\n      moduleTitle\n      moduleImage\n      moduleDescription\n      points\n      __typename\n    }\n    filter {\n      value: key\n      label: value\n      __typename\n    }\n    sort {\n      value: key\n      label: value\n      __typename\n    }\n    modules: result {\n      title\n      description\n      image\n      file\n      progress\n      category\n      type\n      duration\n      nid\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      recommended\n      likes\n      createdOn\n      moduleClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">POLICIESMODULEQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">4c85eed5-ef52-4035-a4b2-f74eb696d19c</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601537115327</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Learning Path Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;leaningPathModuleQuery&quot;,&quot;variables&quot;:{&quot;levelId&quot;:${PoliciesId},&quot;learningPathId&quot;:0},&quot;query&quot;:&quot;query leaningPathModuleQuery($levelId: Int, $learningPathId: Int) {\n  learningPath: getLearningPath(levelId: $levelId, learningPathId: $learningPathId) {\n    learningPathTitle\n    learningPathDescription\n    learningPathTotalDuration\n    learningPathprogress\n    learningPathTotalPoints\n    learningPathImageLarge\n    learningPathImageSmall\n    favourites\n    bookmarks\n    userFavouriteStatus\n    userBookmarkStatus\n    modulesListing {\n      title\n      description\n      moduleType\n      progress\n      duration\n      image\n      file\n      nid\n      section\n      levelTitle\n      levelId\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">LEANINGPATHMODULEQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">520b711d-de9e-4f1c-a65d-bff7272aef0b</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601537117616</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Policies - Resource" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Module Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;policiesModuleQuery&quot;,&quot;variables&quot;:{&quot;nid&quot;:${PoliciesId},&quot;type&quot;:&quot;resource&quot;},&quot;query&quot;:&quot;query policiesModuleQuery($nid: String, $type: String) {\n  policiesModuleQuery: getEduMyPoliciesModule(nid: $nid, type: $type) {\n    info: info {\n      moduleTitle\n      moduleImage\n      moduleDescription\n      points\n      __typename\n    }\n    filter {\n      value: key\n      label: value\n      __typename\n    }\n    sort {\n      value: key\n      label: value\n      __typename\n    }\n    modules: result {\n      title\n      description\n      image\n      file\n      progress\n      category\n      type\n      duration\n      nid\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      recommended\n      likes\n      createdOn\n      moduleClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Leadership-Learning Path" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Module Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;leadershipModuleQuery&quot;,&quot;variables&quot;:{&quot;nid&quot;:&quot;${LeadershipId}&quot;,&quot;type&quot;:&quot;modules&quot;},&quot;query&quot;:&quot;query leadershipModuleQuery($nid: String, $type: String) {\n  leadershipModuleQuery: getEduLeadershipModule(nid: $nid, type: $type) {\n    info: info {\n      moduleTitle\n      moduleImage\n      moduleDescription\n      points\n      __typename\n    }\n    filter {\n      value: key\n      label: value\n      __typename\n    }\n    sort {\n      value: key\n      label: value\n      __typename\n    }\n    modules: result {\n      nid\n      title\n      description\n      image\n      file\n      progress\n      category\n      type\n      duration\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      recommended\n      likes\n      createdOn\n      moduleClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">LEADERSHIPMODULEQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">648f10d6-e313-4d4b-b2fe-44100ba52c5d</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601537747134</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Learning Path Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;leaningPathModuleQuery&quot;,&quot;variables&quot;:{&quot;levelId&quot;:${LeadershipId},&quot;learningPathId&quot;:0},&quot;query&quot;:&quot;query leaningPathModuleQuery($levelId: Int, $learningPathId: Int) {\n  learningPath: getLearningPath(levelId: $levelId, learningPathId: $learningPathId) {\n    learningPathTitle\n    learningPathDescription\n    learningPathTotalDuration\n    learningPathprogress\n    learningPathTotalPoints\n    learningPathImageLarge\n    learningPathImageSmall\n    favourites\n    bookmarks\n    userFavouriteStatus\n    userBookmarkStatus\n    modulesListing {\n      title\n      description\n      moduleType\n      progress\n      duration\n      image\n      file\n      nid\n      section\n      levelTitle\n      levelId\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">LEANINGPATHMODULEQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">84cd82fd-3811-4de8-b877-3535965a6171</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601537749870</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Leadership - Resource" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Module Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;leadershipModuleQuery&quot;,&quot;variables&quot;:{&quot;nid&quot;:${LeadershipId},&quot;type&quot;:&quot;resource&quot;},&quot;query&quot;:&quot;query leadershipModuleQuery($nid: String, $type: String) {\n  leadershipModuleQuery: getEduLeadershipModule(nid: $nid, type: $type) {\n    info: info {\n      moduleTitle\n      moduleImage\n      moduleDescription\n      points\n      __typename\n    }\n    filter {\n      value: key\n      label: value\n      __typename\n    }\n    sort {\n      value: key\n      label: value\n      __typename\n    }\n    modules: result {\n      nid\n      title\n      description\n      image\n      file\n      progress\n      category\n      type\n      duration\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      recommended\n      likes\n      createdOn\n      moduleClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Self Development - Learning Path" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Module Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;selfDevelopmentModuleQuery&quot;,&quot;variables&quot;:{&quot;nid&quot;:&quot;${SelfDevelopmentId}&quot;,&quot;type&quot;:&quot;modules&quot;},&quot;query&quot;:&quot;query selfDevelopmentModuleQuery($nid: String, $type: String) {\n  selfDevelopmentModuleQuery: getEduMyDevelopmentModule(nid: $nid, type: $type) {\n    info: info {\n      moduleTitle\n      moduleImage\n      moduleDescription\n      points\n      __typename\n    }\n    filter {\n      value: key\n      label: value\n      __typename\n    }\n    sort {\n      value: key\n      label: value\n      __typename\n    }\n    modules: result {\n      nid\n      title\n      description\n      image\n      file\n      progress\n      category\n      type\n      duration\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      recommended\n      likes\n      createdOn\n      moduleClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">SELFDEVELOPMENTMODULEQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">ae9a1b38-a6b5-4fe7-9ad1-57fffb74550d</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601538411024</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Learning Path Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;leaningPathModuleQuery&quot;,&quot;variables&quot;:{&quot;levelId&quot;:${SelfDevelopmentId},&quot;learningPathId&quot;:0},&quot;query&quot;:&quot;query leaningPathModuleQuery($levelId: Int, $learningPathId: Int) {\n  learningPath: getLearningPath(levelId: $levelId, learningPathId: $learningPathId) {\n    learningPathTitle\n    learningPathDescription\n    learningPathTotalDuration\n    learningPathprogress\n    learningPathTotalPoints\n    learningPathImageLarge\n    learningPathImageSmall\n    favourites\n    bookmarks\n    userFavouriteStatus\n    userBookmarkStatus\n    modulesListing {\n      title\n      description\n      moduleType\n      progress\n      duration\n      image\n      file\n      nid\n      section\n      levelTitle\n      levelId\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">LEANINGPATHMODULEQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">039a0a51-ea04-4f33-8787-40ed591ca88a</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601538414507</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Self Development - Resource" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Module Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;selfDevelopmentModuleQuery&quot;,&quot;variables&quot;:{&quot;nid&quot;:${SelfDevelopmentId},&quot;type&quot;:&quot;resource&quot;},&quot;query&quot;:&quot;query selfDevelopmentModuleQuery($nid: String, $type: String) {\n  selfDevelopmentModuleQuery: getEduMyDevelopmentModule(nid: $nid, type: $type) {\n    info: info {\n      moduleTitle\n      moduleImage\n      moduleDescription\n      points\n      __typename\n    }\n    filter {\n      value: key\n      label: value\n      __typename\n    }\n    sort {\n      value: key\n      label: value\n      __typename\n    }\n    modules: result {\n      nid\n      title\n      description\n      image\n      file\n      progress\n      category\n      type\n      duration\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      recommended\n      likes\n      createdOn\n      moduleClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Culture Learning Path" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Module Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;cultureModuleQuery&quot;,&quot;variables&quot;:{&quot;nid&quot;:&quot;${CultureId}&quot;,&quot;type&quot;:&quot;modules&quot;},&quot;query&quot;:&quot;query cultureModuleQuery($nid: String, $type: String) {\n  cultureModuleQuery: getEduMyCultureModule(nid: $nid, type: $type) {\n    info: info {\n      moduleTitle\n      moduleImage\n      moduleDescription\n      points\n      __typename\n    }\n    filter {\n      value: key\n      label: value\n      __typename\n    }\n    sort {\n      value: key\n      label: value\n      __typename\n    }\n    modules: result {\n      title\n      description\n      image\n      file\n      progress\n      category\n      type\n      duration\n      nid\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      recommended\n      likes\n      createdOn\n      moduleClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">CULTUREMODULEQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">4aaf62d2-785e-4e1e-9e76-6c0a6d0b43c0</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601539063408</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Learning Path Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;leaningPathModuleQuery&quot;,&quot;variables&quot;:{&quot;levelId&quot;:${CultureId},&quot;learningPathId&quot;:0},&quot;query&quot;:&quot;query leaningPathModuleQuery($levelId: Int, $learningPathId: Int) {\n  learningPath: getLearningPath(levelId: $levelId, learningPathId: $learningPathId) {\n    learningPathTitle\n    learningPathDescription\n    learningPathTotalDuration\n    learningPathprogress\n    learningPathTotalPoints\n    learningPathImageLarge\n    learningPathImageSmall\n    favourites\n    bookmarks\n    userFavouriteStatus\n    userBookmarkStatus\n    modulesListing {\n      title\n      description\n      moduleType\n      progress\n      duration\n      image\n      file\n      nid\n      section\n      levelTitle\n      levelId\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">LEANINGPATHMODULEQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">1c4fe559-a568-4682-8600-205c0991f464</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601539066533</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Culture - Resource" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Module Listing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;cultureModuleQuery&quot;,&quot;variables&quot;:{&quot;nid&quot;:${CultureId},&quot;type&quot;:&quot;resource&quot;},&quot;query&quot;:&quot;query cultureModuleQuery($nid: String, $type: String) {\n  cultureModuleQuery: getEduMyCultureModule(nid: $nid, type: $type) {\n    info: info {\n      moduleTitle\n      moduleImage\n      moduleDescription\n      points\n      __typename\n    }\n    filter {\n      value: key\n      label: value\n      __typename\n    }\n    sort {\n      value: key\n      label: value\n      __typename\n    }\n    modules: result {\n      title\n      description\n      image\n      file\n      progress\n      category\n      type\n      duration\n      nid\n      favourites\n      bookmarks\n      userFavouriteStatus\n      userBookmarkStatus\n      points\n      recommended\n      likes\n      createdOn\n      moduleClassification\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Upcoming Seminars - View All" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Static Labels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStaticLabel&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getStaticLabel {\n  StaticLabels: getStaticLabels {\n    otherLabel\n    businessTab\n    policiesTab\n    cultureTab\n    noDocumentsBusinessText\n    noDocumentsPoliciesText\n    noDocumentsCultureText\n    newThisYearLabel\n    allLearnersLabel\n    allSnapshotLabel\n    allSeminarsLabel\n    upcomingLabel\n    completedLabel\n    noRecentActivityText\n    peopleInvitedLabel\n    aboutTab\n    accountsTab\n    additionalCommentsText\n    advancedLearningTab\n    advanceText\n    allBadgesTab\n    allBadgesText\n    allBrandsText\n    allDoorsText\n    allFbGroupLabel\n    allFeatureLabel\n    allLabel\n    allLeadershipText\n    allRegionsText\n    allSpGroupLabel\n    allTopLearnersText\n    anniversaryText\n    anotherErrText\n    archiveTab\n    attachDocumentText\n    attachNewDocMsg\n    avgMonthlyText\n    awardBadgesText\n    awardBadgeText\n    awardedByText\n    badgeAllocatedText\n    badgeAllocationText\n    badgeCategoryText\n    badgeName\n    badgePointsAwardedText\n    badgePtsText\n    badgesAllocationMsg\n    badgesAwardedText\n    badgesAwardedToLearnerText\n    badgesFoundText\n    badgesText\n    badgeText\n    basicLearningTab\n    basicTab\n    birthdayText\n    blogDetailText\n    blogsTab\n    brandErrMsg\n    brandFoundText\n    brandLinkName\n    brandListLabel\n    brandsLabel\n    brandTab\n    brandValuesTab\n    browserNotSupportVideo\n    buttonName\n    calendarName\n    cancelName\n    categoryForEvaluationText\n    categoryName\n    changeLangText\n    classroomTab\n    clearAllText\n    coachingRecommendText\n    coachText\n    comingSoonText\n    commentsText\n    confirmText\n    congratulationsText\n    consumersTab\n    continueText\n    courseLockedText\n    dashboardFeaturedLabel\n    daysLeftText\n    deleteCommentMsg\n    deleteText\n    detailedViewText\n    doneText\n    editText\n    educationInfoText\n    educationName\n    educationTab\n    elcBrandName\n    emailBodyEmptyText\n    emailLabel\n    emailName\n    emailText\n    emptyTemplateMsg\n    englishLabel\n    enterValidEmailText\n    errMsgLanguage\n    errorTemplateMsg\n    errorText\n    errPostedCommentMsg\n    establishedPerformerText\n    evaluateError\n    evaluateName\n    evaluationText\n    evaluatorText\n    exitEvaluationText\n    experiencesAvailText\n    experiencesTab\n    facebookGroupsText\n    featuredProductsAvalText\n    featuredProductsTab\n    featuredProductText\n    featuredText\n    fieldExecutiveText\n    filterText\n    frenchLabel\n    goalManagementText\n    goBackText\n    gotoHomeText\n    historyFoundText\n    historyText\n    hiText\n    influenceText\n    infoBrandValuesText\n    infocusAvailableText\n    infocusName\n    inFocusTab\n    intermediateText\n    interPerformerText\n    itemName\n    joinedOnText\n    knowledgeText\n    leaderboardText\n    leadershipTab\n    learnerBrandDistribText\n    learnerPhotoName\n    learnerProficiencyDistribText\n    learnersBATab\n    learnersFETab\n    learnersFoundText\n    learnersNameText\n    learnersSelectedText\n    learnersText\n    learnerText\n    learningExperienceLabel\n    learningSnapshotText\n    leaveCommentText\n    levelLabel\n    loadingName\n    loginError\n    logoutText\n    mapAvailableText\n    masterText\n    moduleCompletedText\n    moduleCurrLockText\n    moduleRecommendedText\n    modulesCompletedText\n    modulesRecommendToText\n    modulesSelectedText\n    mostAwardedCatText\n    mostRecentEvaluationText\n    myAccountsTab\n    myBadgesLabel\n    myCOEsTab\n    myCompletedModulesText\n    myDevelopmentTab\n    myEarnedBadgesTab\n    myGroupLink\n    myLearnersLabel\n    myPerformanceText\n    myProfileText\n    myRecommendationsText\n    myRoleTab\n    myTeamDetailsText\n    myTeamStatistics\n    myTeamText\n    myTopLearnersText\n    nalxName\n    newLearnersText\n    nextText\n    noBadgesAwardedText\n    noBadgesAwardedYetText\n    noBadgesFoundText\n    noBlogsAvailText\n    noBrandFoundText\n    noBrandValuesText\n    nocategoriesText\n    noCommentText\n    noCompletedModulesText\n    noDataSelectedFilter\n    noDataSelectionText\n    noDocumentsAccText\n    noDocumentsCOEsText\n    noDocumentsConsumersText\n    noDocumentsLeadershipText\n    noDocumentsMyAccText\n    noDocumentsMyDevText\n    noDocumentsRoleText\n    noDocumentsSelfDevText\n    noDocumentsToolsText\n    noDocumentText\n    noDoorsFoundText\n    noEducationText\n    noEngageStoriesText\n    noExperiencesText\n    noFbGroupText\n    noFeaturedProductsText\n    noFeatureLabel\n    noFeedbackSuggestText\n    noHistoryFoundText\n    noImageAttachedText\n    noInfocusText\n    noLeadershipText\n    noLearnersFoundText\n    noLearnersText\n    noMapAvailableText\n    noModulesAvailableText\n    noModulesRecommendText\n    noModulesToRecommendText\n    noNewnessNotifiText\n    noofBadgesText\n    noRecentEvaluationText\n    noRegionsFoundText\n    noRelevantInfoText\n    noResourcesText\n    northAmericaLabel\n    noSeminarsRegionText\n    noSeminarsText\n    noSocialAccText\n    noSpGroupText\n    notAssessedText\n    noTeamMemberText\n    noText\n    notFormattedImage\n    notFoundPageText\n    notificationName\n    notificationsText\n    notifyEvaluationText\n    noTopLearnersText\n    noUpcomingSeminarsLabel\n    noUpcomingSeminarsText\n    noviceText\n    openModalText\n    outofText\n    overText\n    passwordLabel\n    performanceDashboardText\n    personInvitedLabel\n    placeText\n    pointsText\n    policyUnavailableText\n    privacyPolicyText\n    productName\n    proficiencyLevelLabel\n    profileBackgroundImageName\n    profileImageName\n    profileText\n    promotedText\n    promotionLevelMsg\n    promotionMsg\n    promotionText\n    promotionToLevelMsg\n    readMoreText\n    recentActivitiesLabel\n    recentEvaluationText\n    recommendedbyText\n    recommendModulesText\n    recommendText\n    regionsText\n    rememberMeLabel\n    resourcesInfoText\n    resourcesTab\n    resourceTab\n    reviewAvgScoreText\n    reviewName\n    salesResultText\n    searchName\n    searchResultsText\n    searchTermText\n    searchText\n    sectionText\n    selectBadgesMsg\n    selectBrandText\n    selectDoorText\n    selectOptionText\n    selectRegionText\n    selectSeminarText\n    selectText\n    selfDevelopmentTab\n    seminarsText\n    sendingRecommendText\n    sendText\n    sessionExpiredLabel\n    signInLabel\n    snapshotsPerformedText\n    snapshotsText\n    snapshotText\n    socialIconName\n    somethingWentWrongMsg\n    spanishLabel\n    statusErr\n    statusText\n    submitText\n    subText\n    subtitleText\n    successName\n    supportEmailLabel\n    techniqueServiceText\n    titleText\n    toolsTab\n    topBeautyAdvisorsText\n    topFieldExecutivesText\n    topLearnersName\n    topLearnersText\n    totalAvailableText\n    totalBadgesText\n    totalLearnersText\n    totalModulesCompletedText\n    totalSnapshotsText\n    troubleLabel\n    tryAgainText\n    unlockAdvLearningText\n    unlockAdvModuleMsg\n    upcomingSeminarsLabel\n    updateBirthdate\n    updateText\n    uploadPictureText\n    uploadProfilePicMsg\n    userName\n    verifyRecipientText\n    viewAllLabel\n    viewDetailsText\n    viewDocumentText\n    viewExistingDocumentText\n    viewSplashLabel\n    viewText\n    visitTalentBankText\n    visitText\n    whatNewText\n    writeCommentText\n    writeMsgText\n    yesText\n    notApplicableText\n    readyToLearnText\n    startToSoarText\n    pushingForExcellenceText\n    readyToTeachOthersText\n    ratingBeginingText\n    ratingEarlyText\n    ratingComfortableText\n    ratingReadyText\n    ratingGreatStartText\n    ratingExpertiseText\n    ratingConsistentText\n    ratingSavvyText\n    badgeAwardText\n    fiscalYearText\n    avgPerMonthText\n    mostAwardedText\n    leastAwardedText\n    questionText\n    sinceText\n    emailSentText\n    moreResultsText\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETSTATICLABEL</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">4dc6009b-8969-4449-86df-a25a051fa4de</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591597990950</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;userDetails&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query userDetails($userId: String!) {\n  getUserDetail(userId: $userId) {\n    firstName\n    lastName\n    city\n    region\n    roles\n    userPicture\n    groups\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">USERDETAILS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">1d65cfdd-fe0d-4877-a7e5-fec29a916a8a</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591597990956</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Notifications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNotifications&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query getNotifications($userId: String!) {\n  getNotifications(userId: $userId, page: 0, limit: 0) {\n    notificationsCount\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETNOTIFICATIONS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">504d2318-97ae-407d-accb-fa4495917f5a</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591597990960</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Seminar List" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;seminarList&quot;,&quot;variables&quot;:{&quot;page&quot;:1,&quot;limit&quot;:10,&quot;status&quot;:&quot;&quot;,&quot;search&quot;:&quot;&quot;},&quot;query&quot;:&quot;query seminarList($page: Int, $limit: Int, $status: String, $search: String) {\n  seminarList: getSeminar(page: $page, limit: $limit, status: $status, search: $search) {\n    title\n    date\n    place\n    status\n    spashlink\n    attendance: attendance {\n      present\n      total\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">SEMINARLIST</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">216e10a5-9180-42fc-a7d0-fafb2f0739eb</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591597990993</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Team - Learners - View All" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="My Team Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;myTeamDetails&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;,&quot;page&quot;:1,&quot;limit&quot;:10,&quot;search&quot;:&quot;&quot;,&quot;filter&quot;:&quot;&quot;,&quot;door&quot;:&quot;&quot;,&quot;region&quot;:&quot;&quot;},&quot;query&quot;:&quot;query myTeamDetails($userId: String!, $page: Int!, $limit: Int!, $search: String!, $filter: String!, $door: String!, $region: String!) {\n  myTeamDetails: getMyTeamDetail(userId: $userId, page: $page, limit: $limit, search: $search, filter: $filter, door: $door, region: $region) {\n    memberId\n    brandId\n    userImage\n    firstName\n    lastName\n    role\n    brandNames\n    region\n    area\n    rank\n    dateOfJoining\n    updatedOn\n    proficiencyScore\n    doorId\n    doorName\n    regionId\n    snapshot\n    badgesPoints\n    badges {\n      userId\n      baId\n      count\n      badgeId\n      title\n      alternateImage\n      image\n      __typename\n    }\n    __typename\n  }\n  evaluateRolesPermission: getRolePermissions {\n    evaluation {\n      fieldExecutive {\n        fieldExecutive\n        beautyAdvisor\n        __typename\n      }\n      beautyAdvisor {\n        fieldExecutive\n        beautyAdvisor\n        __typename\n      }\n      salesDirector {\n        fieldExecutive\n        beautyAdvisor\n        __typename\n      }\n      fetm {\n        fieldExecutive\n        beautyAdvisor\n        __typename\n      }\n      storeManager {\n        fieldExecutive\n        beautyAdvisor\n        __typename\n      }\n      brandManagement {\n        fieldExecutive\n        beautyAdvisor\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">MYTEAMDETAILS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">7cc56dab-0090-4060-a07d-8618bfb3d612</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591598830485</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Team - Recent Activities - ViewAll" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Recent Activities" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;recentActivitiesQuery&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;,&quot;userType&quot;:&quot;Learner&quot;},&quot;query&quot;:&quot;query recentActivitiesQuery($userId: String!, $userType: String!) {\n  recentActivities: getRecentActivities(userId: $userId, userType: $userType) {\n    name\n    date\n    operationType\n    categoryName\n    vertical1Score\n    vertical2Score\n    vertical3Score\n    moduleName\n    badgeName\n    badgeImage\n    badgePoints\n    badgeDescription\n    vertical1Comment\n    vertical2Comment\n    vertical3Comment\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Learnr Prof Dist - View All" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>2.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="My Team Skills" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;feMyTeamSkillQuery&quot;,&quot;variables&quot;:{&quot;brandId&quot;:&quot;brands&quot;},&quot;query&quot;:&quot;query feMyTeamSkillQuery($brandId: String) {\n  feMyTeamSkillData: getFEMyTeamSkill(brandId: $brandId) {\n    name\n    count\n    percent\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">68ff203d-e15c-4b63-b293-8ef49eb573b1</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591600919256</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Learner Brand Dist - View All" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>2.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="My Team Brand" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;feMyTeamBrandQuery&quot;,&quot;variables&quot;:{&quot;type&quot;:&quot;learners&quot;,&quot;allBrand&quot;:true},&quot;query&quot;:&quot;query feMyTeamBrandQuery($type: String, $allBrand: String) {\n  feMyTeamBrandData: getFEMyTeamBrand(type: $type, allBrand: $allBrand) {\n    name\n    count\n    percent\n    brandColor\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">96757455-956f-45cd-989f-0d0f327b68e5</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591601042278</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Blog Details" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>2.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Static Labels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStaticLabel&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getStaticLabel {\n  StaticLabels: getStaticLabels {\n    otherLabel\n    businessTab\n    policiesTab\n    cultureTab\n    noDocumentsBusinessText\n    noDocumentsPoliciesText\n    noDocumentsCultureText\n    newThisYearLabel\n    allLearnersLabel\n    allSnapshotLabel\n    allSeminarsLabel\n    upcomingLabel\n    completedLabel\n    noRecentActivityText\n    peopleInvitedLabel\n    aboutTab\n    accountsTab\n    additionalCommentsText\n    advancedLearningTab\n    advanceText\n    allBadgesTab\n    allBadgesText\n    allBrandsText\n    allDoorsText\n    allFbGroupLabel\n    allFeatureLabel\n    allLabel\n    allLeadershipText\n    allRegionsText\n    allSpGroupLabel\n    allTopLearnersText\n    anniversaryText\n    anotherErrText\n    archiveTab\n    attachDocumentText\n    attachNewDocMsg\n    avgMonthlyText\n    awardBadgesText\n    awardBadgeText\n    awardedByText\n    badgeAllocatedText\n    badgeAllocationText\n    badgeCategoryText\n    badgeName\n    badgePointsAwardedText\n    badgePtsText\n    badgesAllocationMsg\n    badgesAwardedText\n    badgesAwardedToLearnerText\n    badgesFoundText\n    badgesText\n    badgeText\n    basicLearningTab\n    basicTab\n    birthdayText\n    blogDetailText\n    blogsTab\n    brandErrMsg\n    brandFoundText\n    brandLinkName\n    brandListLabel\n    brandsLabel\n    brandTab\n    brandValuesTab\n    browserNotSupportVideo\n    buttonName\n    calendarName\n    cancelName\n    categoryForEvaluationText\n    categoryName\n    changeLangText\n    classroomTab\n    clearAllText\n    coachingRecommendText\n    coachText\n    comingSoonText\n    commentsText\n    confirmText\n    congratulationsText\n    consumersTab\n    continueText\n    courseLockedText\n    dashboardFeaturedLabel\n    daysLeftText\n    deleteCommentMsg\n    deleteText\n    detailedViewText\n    doneText\n    editText\n    educationInfoText\n    educationName\n    educationTab\n    elcBrandName\n    emailBodyEmptyText\n    emailLabel\n    emailName\n    emailText\n    emptyTemplateMsg\n    englishLabel\n    enterValidEmailText\n    errMsgLanguage\n    errorTemplateMsg\n    errorText\n    errPostedCommentMsg\n    establishedPerformerText\n    evaluateError\n    evaluateName\n    evaluationText\n    evaluatorText\n    exitEvaluationText\n    experiencesAvailText\n    experiencesTab\n    facebookGroupsText\n    featuredProductsAvalText\n    featuredProductsTab\n    featuredProductText\n    featuredText\n    fieldExecutiveText\n    filterText\n    frenchLabel\n    goalManagementText\n    goBackText\n    gotoHomeText\n    historyFoundText\n    historyText\n    hiText\n    influenceText\n    infoBrandValuesText\n    infocusAvailableText\n    infocusName\n    inFocusTab\n    intermediateText\n    interPerformerText\n    itemName\n    joinedOnText\n    knowledgeText\n    leaderboardText\n    leadershipTab\n    learnerBrandDistribText\n    learnerPhotoName\n    learnerProficiencyDistribText\n    learnersBATab\n    learnersFETab\n    learnersFoundText\n    learnersNameText\n    learnersSelectedText\n    learnersText\n    learnerText\n    learningExperienceLabel\n    learningSnapshotText\n    leaveCommentText\n    levelLabel\n    loadingName\n    loginError\n    logoutText\n    mapAvailableText\n    masterText\n    moduleCompletedText\n    moduleCurrLockText\n    moduleRecommendedText\n    modulesCompletedText\n    modulesRecommendToText\n    modulesSelectedText\n    mostAwardedCatText\n    mostRecentEvaluationText\n    myAccountsTab\n    myBadgesLabel\n    myCOEsTab\n    myCompletedModulesText\n    myDevelopmentTab\n    myEarnedBadgesTab\n    myGroupLink\n    myLearnersLabel\n    myPerformanceText\n    myProfileText\n    myRecommendationsText\n    myRoleTab\n    myTeamDetailsText\n    myTeamStatistics\n    myTeamText\n    myTopLearnersText\n    nalxName\n    newLearnersText\n    nextText\n    noBadgesAwardedText\n    noBadgesAwardedYetText\n    noBadgesFoundText\n    noBlogsAvailText\n    noBrandFoundText\n    noBrandValuesText\n    nocategoriesText\n    noCommentText\n    noCompletedModulesText\n    noDataSelectedFilter\n    noDataSelectionText\n    noDocumentsAccText\n    noDocumentsCOEsText\n    noDocumentsConsumersText\n    noDocumentsLeadershipText\n    noDocumentsMyAccText\n    noDocumentsMyDevText\n    noDocumentsRoleText\n    noDocumentsSelfDevText\n    noDocumentsToolsText\n    noDocumentText\n    noDoorsFoundText\n    noEducationText\n    noEngageStoriesText\n    noExperiencesText\n    noFbGroupText\n    noFeaturedProductsText\n    noFeatureLabel\n    noFeedbackSuggestText\n    noHistoryFoundText\n    noImageAttachedText\n    noInfocusText\n    noLeadershipText\n    noLearnersFoundText\n    noLearnersText\n    noMapAvailableText\n    noModulesAvailableText\n    noModulesRecommendText\n    noModulesToRecommendText\n    noNewnessNotifiText\n    noofBadgesText\n    noRecentEvaluationText\n    noRegionsFoundText\n    noRelevantInfoText\n    noResourcesText\n    northAmericaLabel\n    noSeminarsRegionText\n    noSeminarsText\n    noSocialAccText\n    noSpGroupText\n    notAssessedText\n    noTeamMemberText\n    noText\n    notFormattedImage\n    notFoundPageText\n    notificationName\n    notificationsText\n    notifyEvaluationText\n    noTopLearnersText\n    noUpcomingSeminarsLabel\n    noUpcomingSeminarsText\n    noviceText\n    openModalText\n    outofText\n    overText\n    passwordLabel\n    performanceDashboardText\n    personInvitedLabel\n    placeText\n    pointsText\n    policyUnavailableText\n    privacyPolicyText\n    productName\n    proficiencyLevelLabel\n    profileBackgroundImageName\n    profileImageName\n    profileText\n    promotedText\n    promotionLevelMsg\n    promotionMsg\n    promotionText\n    promotionToLevelMsg\n    readMoreText\n    recentActivitiesLabel\n    recentEvaluationText\n    recommendedbyText\n    recommendModulesText\n    recommendText\n    regionsText\n    rememberMeLabel\n    resourcesInfoText\n    resourcesTab\n    resourceTab\n    reviewAvgScoreText\n    reviewName\n    salesResultText\n    searchName\n    searchResultsText\n    searchTermText\n    searchText\n    sectionText\n    selectBadgesMsg\n    selectBrandText\n    selectDoorText\n    selectOptionText\n    selectRegionText\n    selectSeminarText\n    selectText\n    selfDevelopmentTab\n    seminarsText\n    sendingRecommendText\n    sendText\n    sessionExpiredLabel\n    signInLabel\n    snapshotsPerformedText\n    snapshotsText\n    snapshotText\n    socialIconName\n    somethingWentWrongMsg\n    spanishLabel\n    statusErr\n    statusText\n    submitText\n    subText\n    subtitleText\n    successName\n    supportEmailLabel\n    techniqueServiceText\n    titleText\n    toolsTab\n    topBeautyAdvisorsText\n    topFieldExecutivesText\n    topLearnersName\n    topLearnersText\n    totalAvailableText\n    totalBadgesText\n    totalLearnersText\n    totalModulesCompletedText\n    totalSnapshotsText\n    troubleLabel\n    tryAgainText\n    unlockAdvLearningText\n    unlockAdvModuleMsg\n    upcomingSeminarsLabel\n    updateBirthdate\n    updateText\n    uploadPictureText\n    uploadProfilePicMsg\n    userName\n    verifyRecipientText\n    viewAllLabel\n    viewDetailsText\n    viewDocumentText\n    viewExistingDocumentText\n    viewSplashLabel\n    viewText\n    visitTalentBankText\n    visitText\n    whatNewText\n    writeCommentText\n    writeMsgText\n    yesText\n    notApplicableText\n    readyToLearnText\n    startToSoarText\n    pushingForExcellenceText\n    readyToTeachOthersText\n    ratingBeginingText\n    ratingEarlyText\n    ratingComfortableText\n    ratingReadyText\n    ratingGreatStartText\n    ratingExpertiseText\n    ratingConsistentText\n    ratingSavvyText\n    badgeAwardText\n    fiscalYearText\n    avgPerMonthText\n    mostAwardedText\n    leastAwardedText\n    questionText\n    sinceText\n    emailSentText\n    moreResultsText\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETSTATICLABEL</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">c99e65dc-1a5f-4ee2-adbc-c18c9b93dd80</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591601336310</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;userDetails&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query userDetails($userId: String!) {\n  getUserDetail(userId: $userId) {\n    firstName\n    lastName\n    city\n    region\n    roles\n    userPicture\n    groups\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">USERDETAILS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">1a8ce12e-5291-456a-9e92-752c17084d60</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591601336319</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Notifications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNotifications&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query getNotifications($userId: String!) {\n  getNotifications(userId: $userId, page: 0, limit: 0) {\n    notificationsCount\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETNOTIFICATIONS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">63475809-d090-44dd-b09f-094ef549ceec</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591601336325</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Blolg Comment List" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;blogCommentList&quot;,&quot;variables&quot;:{&quot;page&quot;:0,&quot;limit&quot;:5,&quot;blogId&quot;:&quot;${BlogId}&quot;},&quot;query&quot;:&quot;query blogCommentList($blogId: String!, $page: Int!, $limit: Int!) {\n  blogCommentList: getBlogCommentsList(blogId: $blogId, page: $page, limit: $limit) {\n    results {\n      userPicture\n      firstName\n      lastName\n      createdOn\n      attachment\n      cid\n      pid\n      uid\n      comment\n      __typename\n    }\n    pager {\n      currentPage\n      itemPerPage\n      totalItems\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">BLOGCOMMENTLIST</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">99fc8060-8c1d-434c-abd0-3560e31eefe8</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591601336351</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Language Switcher" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>1.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Language" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getUserLanguages&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getUserLanguages {\n  UserLanguages: getUserLanguages {\n    languageCode\n    languageName\n    languageDirection\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="My Earned Badges" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Static Labels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStaticLabel&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getStaticLabel {\n  StaticLabels: getStaticLabels {\n    otherLabel\n    businessTab\n    policiesTab\n    cultureTab\n    noDocumentsBusinessText\n    noDocumentsPoliciesText\n    noDocumentsCultureText\n    newThisYearLabel\n    allLearnersLabel\n    allSnapshotLabel\n    allSeminarsLabel\n    upcomingLabel\n    completedLabel\n    noRecentActivityText\n    peopleInvitedLabel\n    aboutTab\n    accountsTab\n    additionalCommentsText\n    advancedLearningTab\n    advanceText\n    allBadgesTab\n    allBadgesText\n    allBrandsText\n    allDoorsText\n    allFbGroupLabel\n    allFeatureLabel\n    allLabel\n    allLeadershipText\n    allRegionsText\n    allSpGroupLabel\n    allTopLearnersText\n    anniversaryText\n    anotherErrText\n    archiveTab\n    attachDocumentText\n    attachNewDocMsg\n    avgMonthlyText\n    awardBadgesText\n    awardBadgeText\n    awardedByText\n    badgeAllocatedText\n    badgeAllocationText\n    badgeCategoryText\n    badgeName\n    badgePointsAwardedText\n    badgePtsText\n    badgesAllocationMsg\n    badgesAwardedText\n    badgesAwardedToLearnerText\n    badgesFoundText\n    badgesText\n    badgeText\n    basicLearningTab\n    basicTab\n    birthdayText\n    blogDetailText\n    blogsTab\n    brandErrMsg\n    brandFoundText\n    brandLinkName\n    brandListLabel\n    brandsLabel\n    brandTab\n    brandValuesTab\n    browserNotSupportVideo\n    buttonName\n    calendarName\n    cancelName\n    categoryForEvaluationText\n    categoryName\n    changeLangText\n    classroomTab\n    clearAllText\n    coachingRecommendText\n    coachText\n    comingSoonText\n    commentsText\n    confirmText\n    congratulationsText\n    consumersTab\n    continueText\n    courseLockedText\n    dashboardFeaturedLabel\n    daysLeftText\n    deleteCommentMsg\n    deleteText\n    detailedViewText\n    doneText\n    editText\n    educationInfoText\n    educationName\n    educationTab\n    elcBrandName\n    emailBodyEmptyText\n    emailLabel\n    emailName\n    emailText\n    emptyTemplateMsg\n    englishLabel\n    enterValidEmailText\n    errMsgLanguage\n    errorTemplateMsg\n    errorText\n    errPostedCommentMsg\n    establishedPerformerText\n    evaluateError\n    evaluateName\n    evaluationText\n    evaluatorText\n    exitEvaluationText\n    experiencesAvailText\n    experiencesTab\n    facebookGroupsText\n    featuredProductsAvalText\n    featuredProductsTab\n    featuredProductText\n    featuredText\n    fieldExecutiveText\n    filterText\n    frenchLabel\n    goalManagementText\n    goBackText\n    gotoHomeText\n    historyFoundText\n    historyText\n    hiText\n    influenceText\n    infoBrandValuesText\n    infocusAvailableText\n    infocusName\n    inFocusTab\n    intermediateText\n    interPerformerText\n    itemName\n    joinedOnText\n    knowledgeText\n    leaderboardText\n    leadershipTab\n    learnerBrandDistribText\n    learnerPhotoName\n    learnerProficiencyDistribText\n    learnersBATab\n    learnersFETab\n    learnersFoundText\n    learnersNameText\n    learnersSelectedText\n    learnersText\n    learnerText\n    learningExperienceLabel\n    learningSnapshotText\n    leaveCommentText\n    levelLabel\n    loadingName\n    loginError\n    logoutText\n    mapAvailableText\n    masterText\n    moduleCompletedText\n    moduleCurrLockText\n    moduleRecommendedText\n    modulesCompletedText\n    modulesRecommendToText\n    modulesSelectedText\n    mostAwardedCatText\n    mostRecentEvaluationText\n    myAccountsTab\n    myBadgesLabel\n    myCOEsTab\n    myCompletedModulesText\n    myDevelopmentTab\n    myEarnedBadgesTab\n    myGroupLink\n    myLearnersLabel\n    myPerformanceText\n    myProfileText\n    myRecommendationsText\n    myRoleTab\n    myTeamDetailsText\n    myTeamStatistics\n    myTeamText\n    myTopLearnersText\n    nalxName\n    newLearnersText\n    nextText\n    noBadgesAwardedText\n    noBadgesAwardedYetText\n    noBadgesFoundText\n    noBlogsAvailText\n    noBrandFoundText\n    noBrandValuesText\n    nocategoriesText\n    noCommentText\n    noCompletedModulesText\n    noDataSelectedFilter\n    noDataSelectionText\n    noDocumentsAccText\n    noDocumentsCOEsText\n    noDocumentsConsumersText\n    noDocumentsLeadershipText\n    noDocumentsMyAccText\n    noDocumentsMyDevText\n    noDocumentsRoleText\n    noDocumentsSelfDevText\n    noDocumentsToolsText\n    noDocumentText\n    noDoorsFoundText\n    noEducationText\n    noEngageStoriesText\n    noExperiencesText\n    noFbGroupText\n    noFeaturedProductsText\n    noFeatureLabel\n    noFeedbackSuggestText\n    noHistoryFoundText\n    noImageAttachedText\n    noInfocusText\n    noLeadershipText\n    noLearnersFoundText\n    noLearnersText\n    noMapAvailableText\n    noModulesAvailableText\n    noModulesRecommendText\n    noModulesToRecommendText\n    noNewnessNotifiText\n    noofBadgesText\n    noRecentEvaluationText\n    noRegionsFoundText\n    noRelevantInfoText\n    noResourcesText\n    northAmericaLabel\n    noSeminarsRegionText\n    noSeminarsText\n    noSocialAccText\n    noSpGroupText\n    notAssessedText\n    noTeamMemberText\n    noText\n    notFormattedImage\n    notFoundPageText\n    notificationName\n    notificationsText\n    notifyEvaluationText\n    noTopLearnersText\n    noUpcomingSeminarsLabel\n    noUpcomingSeminarsText\n    noviceText\n    openModalText\n    outofText\n    overText\n    passwordLabel\n    performanceDashboardText\n    personInvitedLabel\n    placeText\n    pointsText\n    policyUnavailableText\n    privacyPolicyText\n    productName\n    proficiencyLevelLabel\n    profileBackgroundImageName\n    profileImageName\n    profileText\n    promotedText\n    promotionLevelMsg\n    promotionMsg\n    promotionText\n    promotionToLevelMsg\n    readMoreText\n    recentActivitiesLabel\n    recentEvaluationText\n    recommendedbyText\n    recommendModulesText\n    recommendText\n    regionsText\n    rememberMeLabel\n    resourcesInfoText\n    resourcesTab\n    resourceTab\n    reviewAvgScoreText\n    reviewName\n    salesResultText\n    searchName\n    searchResultsText\n    searchTermText\n    searchText\n    sectionText\n    selectBadgesMsg\n    selectBrandText\n    selectDoorText\n    selectOptionText\n    selectRegionText\n    selectSeminarText\n    selectText\n    selfDevelopmentTab\n    seminarsText\n    sendingRecommendText\n    sendText\n    sessionExpiredLabel\n    signInLabel\n    snapshotsPerformedText\n    snapshotsText\n    snapshotText\n    socialIconName\n    somethingWentWrongMsg\n    spanishLabel\n    statusErr\n    statusText\n    submitText\n    subText\n    subtitleText\n    successName\n    supportEmailLabel\n    techniqueServiceText\n    titleText\n    toolsTab\n    topBeautyAdvisorsText\n    topFieldExecutivesText\n    topLearnersName\n    topLearnersText\n    totalAvailableText\n    totalBadgesText\n    totalLearnersText\n    totalModulesCompletedText\n    totalSnapshotsText\n    troubleLabel\n    tryAgainText\n    unlockAdvLearningText\n    unlockAdvModuleMsg\n    upcomingSeminarsLabel\n    updateBirthdate\n    updateText\n    uploadPictureText\n    uploadProfilePicMsg\n    userName\n    verifyRecipientText\n    viewAllLabel\n    viewDetailsText\n    viewDocumentText\n    viewExistingDocumentText\n    viewSplashLabel\n    viewText\n    visitTalentBankText\n    visitText\n    whatNewText\n    writeCommentText\n    writeMsgText\n    yesText\n    notApplicableText\n    readyToLearnText\n    startToSoarText\n    pushingForExcellenceText\n    readyToTeachOthersText\n    ratingBeginingText\n    ratingEarlyText\n    ratingComfortableText\n    ratingReadyText\n    ratingGreatStartText\n    ratingExpertiseText\n    ratingConsistentText\n    ratingSavvyText\n    badgeAwardText\n    fiscalYearText\n    avgPerMonthText\n    mostAwardedText\n    leastAwardedText\n    questionText\n    sinceText\n    emailSentText\n    moreResultsText\n    trendingTab\n    noBookmarksText\n    bookmarksText\n    loadMoreText\n    filtersLabel\n    noTredningPostsText\n    learningPathSingularLabel\n    learningPathPluralLabel\n    achievementsLabel\n    noAchievementsText\n    ptsText\n    likesText\n    achievementsCongratsText\n    achievementAwardedText\n    learningModulesText\n    allCategoriesText\n    recommendedText\n    sortText\n    firstQuarterLabel\n    secondQuarterLabel\n    thirdQuarterLabel\n    fourthQuarterLabel\n    unBookmarkText\n    selectYearText\n    badgeHistoryText\n    currentStandingText\n    pointsLeftAwardText\n    pointsAwardedText\n    activityText\n    teamDashboardText\n    modulesSuggestedOrderText\n    termsUnavailableText\n    termsConditionsText\n    homeText\n    coursesText\n    teamText\n    fbGroupText\n    spotlightRewardSiteText\n    roleSwitcherText\n    helpSupportText\n    loginSupportText\n    forAllOtherText\n    callName\n    orText\n    langChangeText\n    andText\n    roleChangeMsg\n    roleRestrictionText\n    termsText\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETSTATICLABEL</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">02671add-f20c-4b97-ae81-eb471b564f28</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601540622691</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;userDetails&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query userDetails($userId: String!) {\n  getUserDetail(userId: $userId) {\n    firstName\n    lastName\n    city\n    region\n    roles\n    userPicture\n    groups\n    location\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">USERDETAILS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">dadce06b-5b6d-468c-a069-9e002ea55860</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601540622696</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Notifications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNotifications&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query getNotifications($userId: String!) {\n  getNotifications(userId: $userId, page: 0, limit: 0) {\n    notificationsCount\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETNOTIFICATIONS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">1f495dcc-e83e-4620-99c2-8df6bb6a465c</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601540622701</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Badges Per User" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;badgePerUserQuery&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query badgePerUserQuery($userId: String!) {\n  badgePerUserQuery: getMyEarnedBadges(userId: $userId) {\n    count\n    sum\n    data {\n      q1 {\n        count\n        sum\n        label\n        result {\n          category\n          categoryId\n          weight\n          data {\n            badgeId\n            badgeName\n            badgeImage\n            badgeCount\n            sum\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      q2 {\n        count\n        sum\n        label\n        result {\n          category\n          categoryId\n          weight\n          data {\n            badgeId\n            badgeName\n            badgeImage\n            badgeCount\n            sum\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      q3 {\n        count\n        sum\n        label\n        result {\n          category\n          categoryId\n          weight\n          data {\n            badgeId\n            badgeName\n            badgeImage\n            badgeCount\n            sum\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      q4 {\n        count\n        sum\n        label\n        result {\n          category\n          categoryId\n          weight\n          data {\n            badgeId\n            badgeName\n            badgeImage\n            badgeCount\n            sum\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">BADGEPERUSERQUERY</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">c37d18ce-c21a-4346-9744-8db35f9bca81</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601540622710</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fiscal Year" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getFiscalYears&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getFiscalYears {\n  getFiscalYears: getArchiveFiscal {\n    value: key\n    label: value\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETFISCALYEARS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">e5de7949-1d05-4b78-91fa-42f1f24b30d9</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1601540622716</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Archive Badges" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Archive Badges" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;archieveBadgeUserQuery&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;,&quot;year&quot;:&quot;19-20&quot;},&quot;query&quot;:&quot;query archieveBadgeUserQuery($userId: String!, $year: String!) {\n  archieveBadgeUser: getArchiveBadges(userId: $userId, year: $year) {\n    category\n    categoryId\n    weight\n    data {\n      badgeId\n      badgeName\n      badgeImage\n      badgeCount\n      sum\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Notifications - View All" enabled="true">
          <boolProp name="PARENT_SAMPLE">true</boolProp>
        </com.blazemeter.jmeter.controller.ParallelSampler>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>5.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Static Labels" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getStaticLabel&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query getStaticLabel {\n  StaticLabels: getStaticLabels {\n    otherLabel\n    businessTab\n    policiesTab\n    cultureTab\n    noDocumentsBusinessText\n    noDocumentsPoliciesText\n    noDocumentsCultureText\n    newThisYearLabel\n    allLearnersLabel\n    allSnapshotLabel\n    allSeminarsLabel\n    upcomingLabel\n    completedLabel\n    noRecentActivityText\n    peopleInvitedLabel\n    aboutTab\n    accountsTab\n    additionalCommentsText\n    advancedLearningTab\n    advanceText\n    allBadgesTab\n    allBadgesText\n    allBrandsText\n    allDoorsText\n    allFbGroupLabel\n    allFeatureLabel\n    allLabel\n    allLeadershipText\n    allRegionsText\n    allSpGroupLabel\n    allTopLearnersText\n    anniversaryText\n    anotherErrText\n    archiveTab\n    attachDocumentText\n    attachNewDocMsg\n    avgMonthlyText\n    awardBadgesText\n    awardBadgeText\n    awardedByText\n    badgeAllocatedText\n    badgeAllocationText\n    badgeCategoryText\n    badgeName\n    badgePointsAwardedText\n    badgePtsText\n    badgesAllocationMsg\n    badgesAwardedText\n    badgesAwardedToLearnerText\n    badgesFoundText\n    badgesText\n    badgeText\n    basicLearningTab\n    basicTab\n    birthdayText\n    blogDetailText\n    blogsTab\n    brandErrMsg\n    brandFoundText\n    brandLinkName\n    brandListLabel\n    brandsLabel\n    brandTab\n    brandValuesTab\n    browserNotSupportVideo\n    buttonName\n    calendarName\n    cancelName\n    categoryForEvaluationText\n    categoryName\n    changeLangText\n    classroomTab\n    clearAllText\n    coachingRecommendText\n    coachText\n    comingSoonText\n    commentsText\n    confirmText\n    congratulationsText\n    consumersTab\n    continueText\n    courseLockedText\n    dashboardFeaturedLabel\n    daysLeftText\n    deleteCommentMsg\n    deleteText\n    detailedViewText\n    doneText\n    editText\n    educationInfoText\n    educationName\n    educationTab\n    elcBrandName\n    emailBodyEmptyText\n    emailLabel\n    emailName\n    emailText\n    emptyTemplateMsg\n    englishLabel\n    enterValidEmailText\n    errMsgLanguage\n    errorTemplateMsg\n    errorText\n    errPostedCommentMsg\n    establishedPerformerText\n    evaluateError\n    evaluateName\n    evaluationText\n    evaluatorText\n    exitEvaluationText\n    experiencesAvailText\n    experiencesTab\n    facebookGroupsText\n    featuredProductsAvalText\n    featuredProductsTab\n    featuredProductText\n    featuredText\n    fieldExecutiveText\n    filterText\n    frenchLabel\n    goalManagementText\n    goBackText\n    gotoHomeText\n    historyFoundText\n    historyText\n    hiText\n    influenceText\n    infoBrandValuesText\n    infocusAvailableText\n    infocusName\n    inFocusTab\n    intermediateText\n    interPerformerText\n    itemName\n    joinedOnText\n    knowledgeText\n    leaderboardText\n    leadershipTab\n    learnerBrandDistribText\n    learnerPhotoName\n    learnerProficiencyDistribText\n    learnersBATab\n    learnersFETab\n    learnersFoundText\n    learnersNameText\n    learnersSelectedText\n    learnersText\n    learnerText\n    learningExperienceLabel\n    learningSnapshotText\n    leaveCommentText\n    levelLabel\n    loadingName\n    loginError\n    logoutText\n    mapAvailableText\n    masterText\n    moduleCompletedText\n    moduleCurrLockText\n    moduleRecommendedText\n    modulesCompletedText\n    modulesRecommendToText\n    modulesSelectedText\n    mostAwardedCatText\n    mostRecentEvaluationText\n    myAccountsTab\n    myBadgesLabel\n    myCOEsTab\n    myCompletedModulesText\n    myDevelopmentTab\n    myEarnedBadgesTab\n    myGroupLink\n    myLearnersLabel\n    myPerformanceText\n    myProfileText\n    myRecommendationsText\n    myRoleTab\n    myTeamDetailsText\n    myTeamStatistics\n    myTeamText\n    myTopLearnersText\n    nalxName\n    newLearnersText\n    nextText\n    noBadgesAwardedText\n    noBadgesAwardedYetText\n    noBadgesFoundText\n    noBlogsAvailText\n    noBrandFoundText\n    noBrandValuesText\n    nocategoriesText\n    noCommentText\n    noCompletedModulesText\n    noDataSelectedFilter\n    noDataSelectionText\n    noDocumentsAccText\n    noDocumentsCOEsText\n    noDocumentsConsumersText\n    noDocumentsLeadershipText\n    noDocumentsMyAccText\n    noDocumentsMyDevText\n    noDocumentsRoleText\n    noDocumentsSelfDevText\n    noDocumentsToolsText\n    noDocumentText\n    noDoorsFoundText\n    noEducationText\n    noEngageStoriesText\n    noExperiencesText\n    noFbGroupText\n    noFeaturedProductsText\n    noFeatureLabel\n    noFeedbackSuggestText\n    noHistoryFoundText\n    noImageAttachedText\n    noInfocusText\n    noLeadershipText\n    noLearnersFoundText\n    noLearnersText\n    noMapAvailableText\n    noModulesAvailableText\n    noModulesRecommendText\n    noModulesToRecommendText\n    noNewnessNotifiText\n    noofBadgesText\n    noRecentEvaluationText\n    noRegionsFoundText\n    noRelevantInfoText\n    noResourcesText\n    northAmericaLabel\n    noSeminarsRegionText\n    noSeminarsText\n    noSocialAccText\n    noSpGroupText\n    notAssessedText\n    noTeamMemberText\n    noText\n    notFormattedImage\n    notFoundPageText\n    notificationName\n    notificationsText\n    notifyEvaluationText\n    noTopLearnersText\n    noUpcomingSeminarsLabel\n    noUpcomingSeminarsText\n    noviceText\n    openModalText\n    outofText\n    overText\n    passwordLabel\n    performanceDashboardText\n    personInvitedLabel\n    placeText\n    pointsText\n    policyUnavailableText\n    privacyPolicyText\n    productName\n    proficiencyLevelLabel\n    profileBackgroundImageName\n    profileImageName\n    profileText\n    promotedText\n    promotionLevelMsg\n    promotionMsg\n    promotionText\n    promotionToLevelMsg\n    readMoreText\n    recentActivitiesLabel\n    recentEvaluationText\n    recommendedbyText\n    recommendModulesText\n    recommendText\n    regionsText\n    rememberMeLabel\n    resourcesInfoText\n    resourcesTab\n    resourceTab\n    reviewAvgScoreText\n    reviewName\n    salesResultText\n    searchName\n    searchResultsText\n    searchTermText\n    searchText\n    sectionText\n    selectBadgesMsg\n    selectBrandText\n    selectDoorText\n    selectOptionText\n    selectRegionText\n    selectSeminarText\n    selectText\n    selfDevelopmentTab\n    seminarsText\n    sendingRecommendText\n    sendText\n    sessionExpiredLabel\n    signInLabel\n    snapshotsPerformedText\n    snapshotsText\n    snapshotText\n    socialIconName\n    somethingWentWrongMsg\n    spanishLabel\n    statusErr\n    statusText\n    submitText\n    subText\n    subtitleText\n    successName\n    supportEmailLabel\n    techniqueServiceText\n    titleText\n    toolsTab\n    topBeautyAdvisorsText\n    topFieldExecutivesText\n    topLearnersName\n    topLearnersText\n    totalAvailableText\n    totalBadgesText\n    totalLearnersText\n    totalModulesCompletedText\n    totalSnapshotsText\n    troubleLabel\n    tryAgainText\n    unlockAdvLearningText\n    unlockAdvModuleMsg\n    upcomingSeminarsLabel\n    updateBirthdate\n    updateText\n    uploadPictureText\n    uploadProfilePicMsg\n    userName\n    verifyRecipientText\n    viewAllLabel\n    viewDetailsText\n    viewDocumentText\n    viewExistingDocumentText\n    viewSplashLabel\n    viewText\n    visitTalentBankText\n    visitText\n    whatNewText\n    writeCommentText\n    writeMsgText\n    yesText\n    notApplicableText\n    readyToLearnText\n    startToSoarText\n    pushingForExcellenceText\n    readyToTeachOthersText\n    ratingBeginingText\n    ratingEarlyText\n    ratingComfortableText\n    ratingReadyText\n    ratingGreatStartText\n    ratingExpertiseText\n    ratingConsistentText\n    ratingSavvyText\n    badgeAwardText\n    fiscalYearText\n    avgPerMonthText\n    mostAwardedText\n    leastAwardedText\n    questionText\n    sinceText\n    emailSentText\n    moreResultsText\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETSTATICLABEL</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">eeca4d4a-3ff3-4b66-9f67-cd49755e28c9</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591604900214</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;userDetails&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query userDetails($userId: String!) {\n  getUserDetail(userId: $userId) {\n    firstName\n    lastName\n    city\n    region\n    roles\n    userPicture\n    groups\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">USERDETAILS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">7a10480f-9999-4d11-948d-dc46fbdbade7</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591604900220</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Notifications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getNotifications&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;},&quot;query&quot;:&quot;query getNotifications($userId: String!) {\n  getNotifications(userId: $userId, page: 0, limit: 0) {\n    notificationsCount\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">GETNOTIFICATIONS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">50acd6df-fcc3-4adf-b93b-1393c96f9474</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591604900222</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Notifications" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;notifications&quot;,&quot;variables&quot;:{&quot;userId&quot;:&quot;${UserId}&quot;,&quot;page&quot;:0,&quot;limit&quot;:0},&quot;query&quot;:&quot;query notifications($userId: String, $page: Int, $limit: Int) {\n  notificationList: getNotifications(userId: $userId, page: $page, limit: $limit) {\n    notificationsCount\n    notifications {\n      category\n      contentType\n      notificationId\n      notificationType\n      userId\n      notificationHeading\n      notificationText\n      notificationIcon\n      notificationDate\n      notificationLink\n      notificationFlag\n      notificationClassroomLevelId\n      notificationClassroomContentId\n      notificationLinkType\n      notificationBrandId\n      __typename\n    }\n    __typename\n  }\n}\n&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mw/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-TRACE-OPERATION" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-OPERATION</stringProp>
                  <stringProp name="Header.value">NOTIFICATIONS</stringProp>
                </elementProp>
                <elementProp name="X-TRACE-REQUESTID" elementType="Header">
                  <stringProp name="Header.name">X-TRACE-REQUESTID</stringProp>
                  <stringProp name="Header.value">32e6c704-6565-44cc-81d6-5dc7a5a84877</stringProp>
                </elementProp>
                <elementProp name="X-START-TIME" elementType="Header">
                  <stringProp name="Header.name">X-START-TIME</stringProp>
                  <stringProp name="Header.value">1591604900236</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">http://localhost:8086/write?u=jmeter&amp;p=bgrAo6IvguLADzrb7vqF&amp;db=jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">NALX</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">90;95;99</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">Test name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
